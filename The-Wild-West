
local Get = function(A)
    return game:GetService(A)
end 
local Players = Get("Players")
local ReplicatedStorage = Get("ReplicatedStorage")
local VirtualUser = Get("VirtualUser")
local HttpService = Get("HttpService")
local ScriptContext = Get("ScriptContext")
local Workspace = Get("Workspace")
local RunService = Get("RunService")
local UserInputService = Get("UserInputService")
local Lighting = Get("Lighting")
local Player = Players.LocalPlayer
local wait = task.wait
local spawn = task.spawn
local Config = {
    WindowName = "V.G Hub",
	Color = Color3.fromRGB(255,128,64),
	Keybind = Enum.KeyCode.RightControl
}
repeat wait() until game:IsLoaded() wait()
Player.Idled:connect(function()
VirtualUser:ClickButton2(Vector2.new())
end)

local Name = "TheWildWest.json"

Des = {}
if makefolder then
    makefolder("V.G Hub")
end

local Settings

if
    not pcall(
        function()
            readfile("V.G Hub//" .. Name)
        end
    )
 then
    writefile("V.G Hub//" .. Name, HttpService:JSONEncode(Des))
end

Settings = HttpService:JSONDecode(readfile("V.G Hub//" .. Name))

local function Save()
    writefile("V.G Hub//" .. Name, HttpService:JSONEncode(Settings))
end


for i, v in pairs(getconnections(game:GetService("ScriptContext").Error)) do
    v:Disable()
    game:GetService("ScriptContext").Error:Connect(
        function(...)
            local Args = {...}
            local i, v =
                pcall(
                function()
                    return Args[3].Name
                end
            )
            if i == false then
                return
            end
        end
    )
end
local OldNameCall = nil
OldNameCall = hookmetamethod(game, "__namecall", function(self, ...)
    local Args = {...}
    local Self = Args[1]
    if getnamecallmethod()=="FireServer" and (self.Name == "ErrorLoggerRemote"or self.Name == 'ACDTResponse') then
        return wait(math.huge)
    end
    return OldNameCall(self, ...)
end)


function FreeForAll(v)
    if Settings.AimBot.FreeForAll == false then
        if Player.Team == v.Team then return false
        else return true end
    else return true end
end
repeat wait() until Player.Character
local Utils = require(ReplicatedStorage.Modules.Utils.Utils)
local Rich = require(ReplicatedStorage.Modules.Character.PlayerCharacter)
local R =  require(ReplicatedStorage.Modules.Character.Ragdolls)
local Animal = require(ReplicatedStorage.Modules.World.WildLife.WildLife.Animal)
local AnimalRiding = require(ReplicatedStorage.Modules.UI.Wildlife.AnimalRiding)

Keys = {}
OreDeposits = {}
for i, v in pairs(Workspace["WORKSPACE_Interactables"].Mining.OreDeposits:GetChildren()) do
    if v.ClassName == "Folder" and v:FindFirstChildOfClass("Model") then
        table.insert(OreDeposits, v.Name)
    end
end

local function GetOwner()
    local Target
    for i, v in ipairs(Workspace["WORKSPACE_Entities"].Animals:GetChildren()) do
        if v.ClassName == "Model" and v:FindFirstChild("Owner") and v.Owner.Value == Player then
            Target = v
        end
    end
    return Target
end


local Circle = Drawing.new("Circle")
Circle.Color = Color3.fromRGB(22, 13, 56)
Circle.Thickness = 1
Circle.Radius = 250
Circle.Visible = false 
Circle.NumSides = 1000
Circle.Filled = false
Circle.Transparency = 1

RunService.RenderStepped:Connect(
    function()
        local Mouse = UserInputService:GetMouseLocation()
        Circle.Position = Vector2.new(Mouse.X, Mouse.Y)
    end
)

Settings.AimBot = {
            FreeForAll = false,
            WallCheck = false,
            Enabled = false,
            FOV = 250,
            Smoothness = 0.02
        }
local Shoot = false

function FreeForAll(v)
    if Settings.AimBot.FreeForAll == false or Settings.T.AimBot.FreeForAll == false then
        if Player.Team == v.Team then
            return false
        else
            return true
        end
    else
        return true
    end
end

function NotObstructing(i, v)
    if Settings.AimBot.WallCheck then
        c = Workspace.CurrentCamera.CFrame.p
        a = Ray.new(c, i - c)
        f = Workspace:FindPartOnRayWithIgnoreList(a, v)
        return f == nil
    else
        return true
    end
end
UserInputService.InputBegan:Connect(
    function(v)
        if v.UserInputType == Enum.UserInputType.MouseButton2 then
            Shoot = true
        end
    end
)

UserInputService.InputEnded:Connect(
    function(v)
        if v.UserInputType == Enum.UserInputType.MouseButton2 then
            Shoot = false
        end
    end
)

function GetClosestToCuror()
    Closest = math.huge
    Target = nil
    for _, v in pairs(Players:GetPlayers()) do
        if FreeForAll(v) then
            if
                v ~= Player and v.Character and v.Character:FindFirstChild("HumanoidRootPart") and
                    v.Character:FindFirstChild("Humanoid") and
                    v.Character.Humanoid.Health ~= 0
             then
                Point, OnScreen = Workspace.CurrentCamera:WorldToViewportPoint(v.Character.HumanoidRootPart.Position)
                if
                    OnScreen and
                        NotObstructing(
                            v.Character.HumanoidRootPart.Position,
                            {Player.Character, v.Character}
                        )
                 then
                    Distance =
                        (Vector2.new(Point.X, Point.Y) -
                        Vector2.new(Player:GetMouse().X, Player:GetMouse().Y)).magnitude
                    if Distance <= Settings.FOV then
                        Closest = Distance
                        Target = v
                    end
                end
            end
        end
    end
    return Target
end


UserInputService.InputEnded:connect(
    function(v)
        if v.KeyCode == Enum.UserInputType.MouseButton2 and Settings.T.Toggle then
            Aim = false
        end
    end
)

RunService.RenderStepped:Connect(
    function() pcall(function()
        if Settings.AimBot.Enabled == false or Shoot == false then
            return
        end
        ClosestPlayer = GetClosestToCuror()
        if ClosestPlayer then
            local Mouse = UserInputService:GetMouseLocation()
            local TargetPos = Workspace.Camera:WorldToViewportPoint(ClosestPlayer.Character.HumanoidRootPart.Position)
            mousemoverel(
                (TargetPos.X - Mouse.X) * Settings.Smoothness,
                (TargetPos.Y - Mouse.Y) * Settings.Smoothness
            )
        end
        end)
    end
)


Settings = {
    TeamCheck = false,
    Delay = 0.01,
    Enabled = false
}

local Aim = false
UserInputService.InputBegan:connect(
    function(v)
        if v.UserInputType == Enum.UserInputType.MouseButton2 and Settings.Toggle then
            Aim = true
            while Aim do
                wait()
                if
                    Player:GetMouse().Target and
                        Players:FindFirstChild(
                            Player:GetMouse().Target.Parent.Name
                        )
                 then
                    local Person =
                        Players:FindFirstChild(
                        Player:GetMouse().Target.Parent.Name
                    )
                    if Person.Team ~= Player.Team or not Settings.TeamCheck then
                        if Settings.Delay > 0 then
                            wait(0.01)
                        end
                        mouse1press()
                        wait()
                        mouse1release()
                    end
                end
                if not Settings.Toggle then
                    break
                end
            end
        end
    end
)

local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/1201for/V.G-Hub/main/test"))()
local Window = Library:CreateWindow(Config, game:GetService("CoreGui"))

local Tab1 = Window:CreateTab("The Wild West")
local Tab2 = Window:CreateTab("UI Settings")

local Section1 = Tab1:CreateSection("")
local Section2 = Tab1:CreateSection("")
local Section3 = Tab2:CreateSection("Menu")
local Section4 = Tab2:CreateSection("Background")

local Toggle1 = Section1:CreateToggle("Auto Sprint", Settings.WalkFast, function(State)
Settings.WalkFast = State
RunService.Stepped:Connect(
    function()
        if Settings.WalkFast then
            Player.Character.Humanoid.WalkSpeed = 25
        end
    end
)

end)
local Toggle1 = Section1:CreateToggle("FullBright", Settings.FullBright, function(State)
Settings.FullBright = State
        if Settings.FullBright then
            Lighting.Ambient = Color3.new(1, 1, 1)
            Lighting.ColorShift_Bottom = Color3.new(1, 1, 1)
            Lighting.ColorShift_Top = Color3.new(1, 1, 1)
        else
            Lighting.Ambient = Color3.new(0, 0, 0)
            Lighting.ColorShift_Bottom = Color3.new(0, 0, 0)
            Lighting.ColorShift_Top = Color3.new(0, 0, 0)
        end
Lighting.Changed:connect(
    function()
        if Settings.FullBright then
            Lighting.Ambient = Color3.new(1, 1, 1)
            Lighting.ColorShift_Bottom = Color3.new(1, 1, 1)
            Lighting.ColorShift_Top = Color3.new(1, 1, 1)
        else
            Lighting.Ambient = Color3.new(0, 0, 0)
            Lighting.ColorShift_Bottom = Color3.new(0, 0, 0)
            Lighting.ColorShift_Top = Color3.new(0, 0, 0)
        end
    end
)
end)
pcall(function()
local Toggle1 = Section1:CreateToggle("Aimbot", Settings.AimBot.Enabled, function(State)
    Settings.AimBot.Enabled = State
end)

local Toggle1 = Section1:CreateToggle("FreeForAll", Settings.AimBot.FreeForAll, function(State)
    Settings.AimBot.FreeForAll = State
end)

local Toggle1 = Section1:CreateToggle("WallCheck", Settings.AimBot.WallCheck, function(State)
    Settings.AimBot.WallCheck = State
end)
local Toggle1 = Section1:CreateToggle("TriggerBot", Settings.Toggle, function(State)
    Settings.Toggle = State
end)

local Slider2 = Section1:CreateSlider("Aimbot Smoothness", 0,10,Settings.Smoothness,false, function(Value)
    Settings.AimBot.Smoothness = Value
end)
local Slider2 = Section1:CreateSlider("Aimbot Radius", 0,1000,Settings.AimBot.FOV,false, function(Value)
    Settings.AimBot.FOV = Circle.Radius 
    Settings.AimBot.FOV = Value
end)
local Toggle1 = Section1:CreateToggle("Circle Visible", Settings.AimBot.Visible, function(State)
   Circle.Visible = State
end)

local Colorpicker3 = Section1:CreateColorpicker("Circle Color", function(Color)
    Circle.Color = Color
end)
end)
local Toggle1 = Section1:CreateToggle("Spam DuelRequests", Settings.Hentai, function(State)
Settings.Hentai = State
spawn(function()
while wait() and Settings.Hentai do
    for i, v in pairs(Players:GetPlayers()) do wait(0.2)
        if v ~= Player then
            ReplicatedStorage.Communication.Events.DuelRequest:FireServer(v)
        end
    end
end
end)
end)

local Toggle1 = Section1:CreateToggle("Invis Character CS", Settings.Invis, function(State)
Settings.Invis = State
for i, v in pairs(Player.Character:GetDescendants()) do
    if v:IsA("BasePart") then
        if Settings.Invis then
            v.Transparency = 1
        else
            v.Transparency = 0
        end
    end
end
Player.CharacterAdded:Connect(function()
repeat wait() until Player.Character.Humanoid
for i, v in pairs(Player.Character:GetDescendants()) do
    if v:IsA("BasePart") then
        if Settings.Invis then
            v.Transparency = 1
        else
            v.Transparency = 0
        end
    end
end
end)
end)

local Toggle1 = Section1:CreateToggle("Player Silent Aim", nil, function(State)
Settings.SilentAim = State
local Players = Players
local LocalPlayer = Player
local Mouse = LocalPlayer:GetMouse()
function ClosestPlayerToCurser()
    local MaxDistance, Closest = math.huge
    for i,v in pairs(Players.GetPlayers(Players)) do
        if v ~= LocalPlayer  and v.Character and Settings.TeamCheck and v.Team ~= LocalPlayer.Team then
            local H = v.Character.FindFirstChild(v.Character, "Head")
            if H then 
                local Pos, Vis = Workspace.CurrentCamera.WorldToScreenPoint(Workspace.CurrentCamera, H.Position)
                if Vis then
                    local A1, A2 = Vector2.new(Mouse.X, Mouse.Y), Vector2.new(Pos.X, Pos.Y)
                    local Dist = (A2 - A1).Magnitude
                    if Dist < MaxDistance and Dist <= 2500 then
                        MaxDistance = Dist
                        Closest = v
                    end
                end
            end
        end
    end
    return Closest
end
local OldNameCall = nil
OldNameCall = hookmetamethod(game, "__namecall", function(self,...)
    local Args = {...}
    if getnamecallmethod() == "FindPartOnRayWithIgnoreList" and not checkcaller() and  Settings.SilentAim  then
        local GivemeHead = ClosestPlayerToCurser()
        if GivemeHead and GivemeHead.Character and GivemeHead.Character.FindFirstChild(GivemeHead.Character, "UpperTorso") then
            Args[1] = Ray.new(Workspace.CurrentCamera.CFrame.Position, (GivemeHead.Character.UpperTorso.Position - Workspace.CurrentCamera.CFrame.Position).Unit * 1000)
            return OldNameCall(self, unpack(Args))
        end
    end
    return OldNameCall(self, ...)
end)

end)

local Toggle1 = Section1:CreateToggle("Player Silent FreeForAll", Settings.TeamCheck, function(State)
Settings.TeamCheck = State
end)
local Toggle1 = Section1:CreateToggle("Animal Silent Aim", Settings.SilentAnimalAim, function(State)
Settings.SilentAnimalAim = State
local Mouse = Player:GetMouse()
local Animals = game:GetService("Workspace")["WORKSPACE_Entities"].Animals
function ClosestAnimalToCurser()
    local MaxDistance, Closest = math.huge
    for i,v in pairs(Animals.GetChildren(Animals)) do
        if v.PrimaryPart  then
            local H = v.FindFirstChild(v, "Head")
            if H then 
                local Pos, Vis = Workspace.CurrentCamera.WorldToScreenPoint(Workspace.CurrentCamera, H.Position)
                if Vis then
                    local A1, A2 = Vector2.new(Mouse.X, Mouse.Y), Vector2.new(Pos.X, Pos.Y)
                    local Dist = (A2 - A1).Magnitude
                    if Dist < MaxDistance and Dist <= math.huge then
                        MaxDistance = Dist
                        Closest = v
                    end
                end
            end
        end
    end
 return Closest
end

local OldNameCall = nil
OldNameCall = hookmetamethod(game, "__namecall", function(self,...)
    local Args = {...}
    if getnamecallmethod() == "FindPartOnRayWithIgnoreList" and not checkcaller() and Settings.SilentAnimalAim then
        local GivemeHead = ClosestAnimalToCurser()
        if GivemeHead and GivemeHead.PrimaryPart and GivemeHead.FindFirstChild(GivemeHead, "Head") then
            Args[1] = Ray.new(Workspace.CurrentCamera.CFrame.Position, (GivemeHead.Head.Position - Workspace.CurrentCamera.CFrame.Position).Unit * 1000)
            return OldNameCall(self, unpack(Args))
        end
    end
    return OldNameCall(self, ...)
end)
end)



local Toggle1 = Section1:CreateToggle("Anti Ragdoll", Settings.AntiRagDoll, function(State)
Settings.AntiRagDoll = State
A = hookfunction(Rich.CreateRagdollForce, function(...)
    if Settings.AntiRagDoll and Player.Character.Humanoid.Health ~= 0 then
        return wait(9e9)
    end
    return A(...)
end)
end) 

local Toggle1 = Section1:CreateToggle("Infinite animal Boosts", Settings.InfiniteBoosts, function(State)
Settings.InfiniteBoosts = State
Fuck =
    hookfunction(
    Animal.Mount,
    function(...)
        if Settings.InfiniteBoosts and Player.Character.Humanoid.Health ~= 0  then
            Fuck(...)
            local RidingAnimal = AnimalRiding.GetRidingAnimal()
            RidingAnimal.MaxBoosts = math.huge
            RidingAnimal.Boosts = math.huge
            return
        end
        return Fuck(...)
    end
)
end)

local Toggle1 = Section1:CreateToggle("Anti Hosile Animals", Settings.Kok, function(State)
Settings.Kok = State
for i, v in pairs(Workspace["WORKSPACE_Entities"].Animals:GetChildren()) do
    if v:IsA("Model") then pcall(function()
        if Settings.Kok then
            v.Target:remove()
            v.Anger:remove()
        end end)
    end
end
Workspace["WORKSPACE_Entities"].Animals.ChildAdded:Connect(
    function(v)
        if v:IsA("Model") then pcall(function()
            if Settings.Kok then
                v.Target:remove()
                v.Anger:remove() 
            end end)
        end
    end
)
end)

local Toggle1 = Section1:CreateToggle("InstantBreakFree", Settings.InstantBreakFree, function(State)
Settings.InstantBreakFree = State
    System = hookfunction(R.EnterRagdoll, function(...)
    if Settings.InstantBreakFree and Player.Character:WaitForChild("Humanoid").Health ~= 0 then
            local Start = tick()
            repeat
                wait()
            until Rich:CanBreakFree() or Start - tick() > 4
            Rich.BreakFreePerc = 5
        end
    return System(...)
end)
end) 

local Toggle1 = Section1:CreateToggle("AutoGetUp", Settings.AutoGetUp, function(State)
Settings.AutoGetUp = State
Y = hookfunction(R.EnterRagdoll, function(...)
    if Settings.AutoGetUp and Player.Character:WaitForChild("Humanoid").Health ~= 0 then
            local Start = tick()
        repeat
            wait()
        until Rich:CanGetUp() or Start - tick() > 2
        if Rich.IsRagdolledSelf then
                Rich:GetUp()
        end
    end
    return Y(...)
end)
end)

local Toggle1 = Section1:CreateToggle("infinite Stamina", Settings.Infinite, function(State)
Settings.Infinite = State
local OldNameCall = nil
OldNameCall = hookmetamethod(game, "__namecall", function(...)
    local Args = {...}
    local Self = Args[1]
    if getnamecallmethod()=="FireServer" and tostring(Self)=="LowerStamina" and Settings.Infinite then
            return wait(math.huge)
    end
    return OldNameCall(...)
end) 
end)


local Toggle1 = Section1:CreateToggle("NoFall Damage", Settings.NoFall, function(State)
Settings.NoFall = State
local OldNameCall = nil
OldNameCall = hookmetamethod(game, "__namecall", function(...)
    local Args = {...}
    local Self = Args[1]
    if getnamecallmethod()=="FireServer" and tostring(Self)=="DamageSelf" and Settings.NoFall then
            return nil
    end
    return OldNameCall(...)
end) 
end)

local Toggle1 = Section2:CreateToggle("NoSpread", Settings.NOSpread, function(State)
Settings.NOSpread = State
for i, v in pairs(getgc(true)) do
    if type(v) == "table" and rawget(v, "BaseRecoil") then
        if Settings.NoSpread then
        v.FanAccuracy = 0
        v.ProjectileAccuracy = 0
        else
        v.ProjectileAccuracy = 1
        v.FanAccuracy = 1
        end
    end
end
end)


local Toggle1 = Section2:CreateToggle("Wallbang", Settings.WallBang, function(State)
Settings.WallBang = State
for i, v in pairs(getgc(true)) do
    if type(v) == "table" and rawget(v, "BaseRecoil") then
        v.ProjectilePenetration = Settings.WallBang == false and Key["Weapons"][i].ProjectilePenetration or 1000
    end
end
end)
local Toggle1 = Section2:CreateToggle("InstantReload", Settings.InstantReload, function(State)
Settings.InstantReload = State
for i, v in pairs(getgc(true)) do
    if type(v) == "table" and rawget(v, "BaseRecoil")  then
        v.ReloadSpeed = Settings.InstantReload == false and Key["Weapons"][i].ReloadSpeed or 1000
        v.LoadSpeed = Settings.InstantReload == false and Key["Weapons"][i].LoadSpeed or 1000
        v.LoadEndSpeed = Settings.InstantReload == false and Key["Weapons"][i].LoadEndSpeed or 1000
    end
end
end)
local Toggle1 = Section2:CreateToggle("Anti Grass", Settings.Grass, function(State)
Settings.Grass = State
if Settings.Grass then
    sethiddenproperty(Workspace.Terrain, "Decoration", false)
else
    sethiddenproperty(Workspace.Terrain, "Decoration", true)
end
end)

local Toggle1 = Section2:CreateToggle("Anti Trees", Settings.Simp, function(State)
    Settings.Simp = State
end)

local Toggle1 = Section2:CreateToggle("Anti Vegetation", Settings.Simp2, function(State)
    Settings.Simp2 = State
end)

spawn(
    function()
        while wait(1) do
            for i, v in pairs(Workspace["WORKSPACE_Geometry"]:GetChildren()) do
                if v:FindFirstChild("Trees") then
                    for i, v in pairs(v.Trees:GetChildren()) do
                        if v.ClassName == "Model" and v:FindFirstChild("Leaves") then
                            if Settings.Simp then
                                v.Leaves.Transparency = 1
                                v.Trunk.Transparency = 1
                            else
                                v.Leaves.Transparency = 0
                                v.Trunk.Transparency = 0
                            end
                        end
                    end
                elseif v:FindFirstChild("Vegetation") then
                    for i, v in pairs(v.Vegetation:GetChildren()) do
                        if v.ClassName == "Model" and v:FindFirstChildOfClass("MeshPart") then
                            if Settings.Simp2 then
                                v:FindFirstChildOfClass("MeshPart").Transparency = 1
                            else
                                v:FindFirstChildOfClass("MeshPart").Transparency = 0
                            end
                        end
                    end
                end
            end
        end
    end
)

local Toggle1 = Section2:CreateToggle("Instant Cook Meat", Settings.Cook, function(State)
Settings.Cook = State
spawn(function()
while wait(1) and Settings.Cook do
    for i, v in pairs(Workspace["WORKSPACE_Interactables"].Placeables:GetChildren()) do
        if v.ClassName == "Model" and v.Owner.Value == Player then
            wait(0.5)
            repeat
                wait()
            until v.Center or Settings.Cook
            ReplicatedStorage.Communication.Events.StartCookingAtCampFire:FireServer(v.Center)
            ReplicatedStorage.Communication.Events.CookFood:FireServer(v.Center)
            ReplicatedStorage.Communication.Events.StopCookingAtCampFire:FireServer(v.Center)
        end
    end
end
end)
end)

local Toggle1 = Section2:CreateToggle("Anti Rain", Settings.Rain, function(State)
Settings.Rain = State
local save = ReplicatedStorage.GlobalWeather.RainPercent.Value
RunService.Stepped:Connect(
    function()
        if Settings.Rain then
            ReplicatedStorage.GlobalWeather.RainPercent.Value = 0
        else
            ReplicatedStorage.GlobalWeather.RainPercent.Value = save
        end
    end
)
end)

local ESP = loadstring(game:HttpGet("https://raw.githubusercontent.com/1201for/V.G-Hub/main/Karrot-Esp"))()

local Toggle1 = Section1:CreateToggle("Enable Esp", Settings.Esp, function(State)
    Settings.Esp = State
    ESP:Toggle(Settings.Esp)
    
end)

local Toggle1 = Section1:CreateToggle("PLayer Esp", Settings.PlayerEsp, function(State)
    Settings.PlayerEsp = State
    ESP.Players = Settings.PlayerEsp
end)


local Toggle1 = Section2:CreateToggle("Ore Esp", Settings.Ore, function(State)
Settings.Ore = State
ESP.Ore = Settings.Ore
ESP:AddObjectListener(Workspace["WORKSPACE_Interactables"].Mining.OreDeposits, {
    Color = Color3.new(20, 255, 228),
    Type = "Model",
    PrimaryPart = function(v)
        local H = v:FindFirstChildWhichIsA("BasePart")
        while not H do
            wait()
            H = v:FindFirstChildWhichIsA("BasePart")
        end
        return H
    end,
    Validator = function(v)
    if v:FindFirstChildWhichIsA("BasePart").Name:match("Ore") then
        return not Players:GetPlayerFromCharacter(v) and v:FindFirstChildWhichIsA("BasePart").Name:match("Ore")
    end end,
    CustomName = function(v)
        return v:FindFirstChildWhichIsA("BasePart").Name:match("Ore")
    end,
    IsEnabled = "Ore",
})
end)

local Toggle1 = Section2:CreateToggle("Animal Esp", Settings.Animal, function(State)

Settings.Animal = State
ESP.Animal = Settings.Animal
ESP:AddObjectListener(game:GetService("Workspace")["WORKSPACE_Entities"].Animals, {
    Color = Color3.new(20, 255, 228),
    Type = "Model",
    PrimaryPart = function(v)
        local H = v:FindFirstChildWhichIsA("BasePart")
        while not H do
            wait()
            H = v:FindFirstChildWhichIsA("BasePart")
        end
        return H
    end,
    Validator = function(v)
    if v.ClassName == "Model" and v:FindFirstChildWhichIsA("BasePart") and not v.Name:match("Horse") then
        return not Players:GetPlayerFromCharacter(v) and v
    end end,
    CustomName = function(v)
        return v.Name
    end,
    IsEnabled = "Animal",
})

end)

local Toggle1 = Section1:CreateToggle("Tracers Esp", Settings.Tracers, function(State)
    Settings.Tracers = State
    ESP.Tracers = Settings.Tracers
end)

local Toggle1 = Section1:CreateToggle("Name Esp", Settings.EspNames, function(State)
    ESP.Names = Settings.EspNames
    Settings.EspNames = State
end)

local Toggle1 = Section1:CreateToggle("Boxes Esp", Settings.Boxes, function(State)
    Settings.Boxes = State
    ESP.Boxes = Settings.Boxes
end)





local Button1 = Section2:CreateButton("Anti Lag", function()
for _, v in pairs(Workspace:GetDescendants()) do
    if v:IsA("BasePart") and not v.Parent:FindFirstChild("Humanoid") then --- i stole this from the actual game LOL >-<
        v.Material = Enum.Material.SmoothPlastic
        if v:IsA("Texture") then
            v:Destroy()
        end
    end
end

end)


local Button1 = Section2:CreateButton("Lag Switch F3", function()
local X = false
local C = settings()

game:service "UserInputService".InputEnded:connect(
    function(V)
        if V.KeyCode == Enum.KeyCode.F3 then
            X = not X
            C.Network.IncomingReplicationLag = X and 10 or 0
        end
    end
)
end) 
local Button1 = Section2:CreateButton("ServerHop", function()
local PlaceID = game.PlaceId
local AllIDs = {}
local foundAnything = ""
local actualHour = os.date("!*t").hour
local Deleted = false
local File = pcall(function()
    AllIDs = game:GetService('HttpService'):JSONDecode(readfile("NotSameServers.json"))
end)
if not File then
    table.insert(AllIDs, actualHour)
    writefile("NotSameServers.json", game:GetService('HttpService'):JSONEncode(AllIDs))
end
function TPReturner()
    local Site;
    if foundAnything == "" then
        Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100'))
    else
        Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100&cursor=' .. foundAnything))
    end
    local ID = ""
    if Site.nextPageCursor and Site.nextPageCursor ~= "null" and Site.nextPageCursor ~= nil then
        foundAnything = Site.nextPageCursor
    end
    local num = 0;
    for i,v in pairs(Site.data) do
        local Possible = true
        ID = tostring(v.id)
        if tonumber(v.maxPlayers) > tonumber(v.playing) then
            for _,Existing in pairs(AllIDs) do
                if num ~= 0 then
                    if ID == tostring(Existing) then
                        Possible = false
                    end
                else
                    if tonumber(actualHour) ~= tonumber(Existing) then
                        local delFile = pcall(function()
                            delfile("NotSameServers.json")
                            AllIDs = {}
                            table.insert(AllIDs, actualHour)
                        end)
                    end
                end
                num = num + 1
            end
            if Possible == true then
                table.insert(AllIDs, ID)
                wait()
                pcall(function()
                    writefile("NotSameServers.json", game:GetService('HttpService'):JSONEncode(AllIDs))
                    wait()
                    game:GetService("TeleportService"):TeleportToPlaceInstance(PlaceID, ID, Player)
                end)
                wait(4)
            end
        end
    end
end

function Teleport()
    while wait() do
        pcall(function()
            TPReturner()
            if foundAnything ~= "" then
                TPReturner()
            end
        end)
    end
end

-- If you'd like to use a script before server hopping (Like a Automatic Chest collector you can put the Teleport() after it collected everything.
Teleport() 
end)
local Button1 = Section2:CreateButton("Rejoin", function()
game:GetService("TeleportService"):Teleport(game.PlaceId, Player) end)

local Toggle3 = Section3:CreateToggle("UI Toggle", nil, function(State)
	Window:Toggle(State)
end)
Toggle3:CreateKeybind(tostring(Config.Keybind):gsub("Enum.KeyCode.", ""), function(Key)
	Config.Keybind = Enum.KeyCode[Key]
end)
Toggle3:SetState(true)
Section3:CreateLabel("Credits DekuDimz#7960")
Section3:CreateLabel("Credits AlexR32#3232 Ui")
Section3:CreateLabel("Credits FruitBux")
local Colorpicker3 = Section3:CreateColorpicker("UI Color", function(Color)
	Window:ChangeColor(Color)
end)
Colorpicker3:UpdateColor(Config.Color)
-- credits to jan for patterns
local Dropdown3 = Section4:CreateDropdown("Image")
local Option7 = Dropdown3:AddOption("Default", function(String)
	Window:SetBackground("2151741365")
end)
local Option8 = Dropdown3:AddOption("Hearts", function(String)
	Window:SetBackground("6073763717")
end)
local Option9 = Dropdown3:AddOption("Abstract", function(String)
	Window:SetBackground("6073743871")
end)
local Option10 = Dropdown3:AddOption("Hexagon", function(String)
	Window:SetBackground("6073628839")
end)
local Option11 = Dropdown3:AddOption("Circles", function(String)
	Window:SetBackground("6071579801")
end)
local Option12 = Dropdown3:AddOption("Lace With Flowers", function(String)
	Window:SetBackground("6071575925")
end)
local Option13 = Dropdown3:AddOption("Floral", function(String)
	Window:SetBackground("5553946656")
end)
Option7:SetOption()

local Colorpicker4 = Section4:CreateColorpicker("Color", function(Color)
	Window:SetBackgroundColor(Color)
end)
Colorpicker4:UpdateColor(Color3.new(1,1,1))

local Slider3 = Section4:CreateSlider("Transparency",0,1,nil,false, function(Value)
	Window:SetBackgroundTransparency(Value)
end)
Slider3:SetValue(0)

local Slider4 = Section4:CreateSlider("Tile Scale",0,1,nil,false, function(Value)
	Window:SetTileScale(Value)
end)
Slider4:SetValue(0.5)
