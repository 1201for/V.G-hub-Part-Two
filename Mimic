local Config = {
    WindowName = "V.G Hub",
	Color = Color3.fromRGB(255,128,64),
	Keybind = Enum.KeyCode.RightControl
}
local Get = function(A)
    return game:GetService(A)
end 
local Workspace = Get("Workspace")
local Players = Get("Players")
local VirtualUser = Get("VirtualUser")
local RunService = Get("RunService")
local StarterGui = Get("StarterGui")
local Lighting = Get("Lighting")
local HttpService = Get("HttpService")
local Player = Players.LocalPlayer
Player.Idled:connect(function()
VirtualUser:ClickButton2(Vector2.new())
end)


local Name = "The Mimic.json"

Des = {}
if makefolder then
    makefolder("V.G Hub")
end

local Settings

if
    not pcall(
        function()
            readfile("V.G Hub//" .. Name)
        end
    )
 then
    writefile("V.G Hub//" .. Name, HttpService:JSONEncode(Des))
end

Settings = HttpService:JSONDecode(readfile("V.G Hub//" .. Name))

local function Save()
    writefile("V.G Hub//" .. Name, HttpService:JSONEncode(Settings))
end


Instance.new("Folder",Workspace).Name = "NPC(s)" 
for i,v in pairs(Workspace:GetChildren()) do
    if v.Name ~= "Terrain" and v.Name ~= "Camera" and v.ClassName ~= "Folder" and v.Name ~= Player.Name then
        local folder = v:FindFirstChild("Humanoid") and Workspace:FindFirstChild("NPC(s)") or Workspace:FindFirstChild(v.ClassName.."(s)") or Instance.new("Folder", Workspace)
        folder.Name = v.ClassName.."(s)"
        v.Parent = folder
    end
end

Settings.Speed = 25
Player:GetMouse().KeyDown:connect(function(v)
	if v == "0" then --"Shift to run" 0 == shift
		print("Running")
		Player.Character.Humanoid.WalkSpeed = Settings.Speed
	end
end)

Player:GetMouse().KeyUp:connect(function(v)
	if v == "0" then
		Player.Character.Humanoid.WalkSpeed = 16 
	end
end)

local OldNameCall
OldNameCall =
    hookmetamethod(
    game,
    "__newindex",
    function(A, B, C)
        if (not checkcaller() and A.ClassName == "Humanoid" and (B == "WalkSpeed" or B == "JumpPower")) then
            return
        end
        return OldNameCall(A, B, C)
    end
)

Settings.CFLYSPEED = 1
local KO = function()
    local moveDirection = Player.Character:FindFirstChildOfClass("Humanoid").MoveDirection * (Settings.CFLYSPEED * 5)
    workspace.CurrentCamera.CFrame =
        workspace.CurrentCamera.CFrame *
        CFrame.new(
            -Player.Character:WaitForChild("Head").CFrame:ToObjectSpace(workspace.CurrentCamera.CFrame).Position.X,
            Player.Character:WaitForChild("Head").CFrame:ToObjectSpace(workspace.CurrentCamera.CFrame).Position.Y,
            -Player.Character:WaitForChild("Head").CFrame:ToObjectSpace(workspace.CurrentCamera.CFrame).Position.Z + 1
        )
    local cameraPosition = workspace.CurrentCamera.CFrame.Position

    local objectSpaceVelocity =
        CFrame.new(
        cameraPosition,
        Vector3.new(
            Player.Character:WaitForChild("Head").Position.X,
            cameraPosition.Y,
            Player.Character:WaitForChild("Head").Position.Z
        )
    ):VectorToObjectSpace(moveDirection)
    Player.Character:WaitForChild("Head").CFrame =
        CFrame.new(Player.Character:WaitForChild("Head").Position) * (workspace.CurrentCamera.CFrame - cameraPosition) *
        CFrame.new(objectSpaceVelocity)
end

local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/1201for/V.G-Hub/main/test"))()
local Window = Library:CreateWindow(Config, game:GetService("CoreGui"))

local Tab1 = Window:CreateTab("The mimic")
local Tab2 = Window:CreateTab("UI Settings")

local Section1 = Tab1:CreateSection("")
local Section2 = Tab1:CreateSection("")
local Section3 = Tab2:CreateSection("Menu")
local Section4 = Tab2:CreateSection("Background")

local Toggle1 = Section1:CreateToggle("Enable Reset", Settings.System, function(State)
Settings.System = State

while wait() do
    pcall(
        function()
            if Settings.System then
                StarterGui:SetCore("ResetButtonCallback", true)
            else
                StarterGui:SetCore("ResetButtonCallback", false)
            end
        end
    )
end
end)

local Toggle1 = Section1:CreateToggle("FullBright", Settings.FullBright, function(State)
Settings.FullBright = State
        if Settings.FullBright then
            Lighting.Ambient = Color3.new(1, 1, 1)
            Lighting.ColorShift_Bottom = Color3.new(1, 1, 1)
            Lighting.ColorShift_Top = Color3.new(1, 1, 1)
        else
            Lighting.Ambient = Color3.new(0, 0, 0)
            Lighting.ColorShift_Bottom = Color3.new(0, 0, 0)
            Lighting.ColorShift_Top = Color3.new(0, 0, 0)
        end
Lighting.Changed:connect(
    function()
        if Settings.FullBright then
            Lighting.Ambient = Color3.new(1, 1, 1)
            Lighting.ColorShift_Bottom = Color3.new(1, 1, 1)
            Lighting.ColorShift_Top = Color3.new(1, 1, 1)
        else
            Lighting.Ambient = Color3.new(0, 0, 0)
            Lighting.ColorShift_Bottom = Color3.new(0, 0, 0)
            Lighting.ColorShift_Top = Color3.new(0, 0, 0)
        end
    end
) 
end)

local Toggle1 = Section1:CreateToggle("Disable FirstPerson", Settings.W, function(State)
Settings.W = State
local Clone = Workspace.Camera:Clone()
Workspace.Camera:remove()
Clone.Parent = Workspace
if Settings.W then
    Player.CameraMode = Enum.CameraMode.Classic
    Player.PlayerGui.CursorScript.Disabled = true

    local mouse = Player:GetMouse()
    mouse.Icon = "http://www.roblox.com/asset/?id=417446600"
else
    Player.CameraMode = Enum.CameraMode.LockFirstPerson
    Player.PlayerGui.CursorScript.Disabled = false
end
end)

local Button1 = Section1:CreateButton("Grab All Keys", function()
local Save = Player.Character.HumanoidRootPart.CFrame
for i, v in pairs(Workspace:GetDescendants()) do
    if v:IsA("ProximityPrompt") and v.Parent:IsA("BasePart")  then
        Player.Character.HumanoidRootPart.CFrame = v.Parent.CFrame
        wait(0.5)
        fireproximityprompt(v)
    end
end
Player.Character.HumanoidRootPart.CFrame = Save
end)


local Toggle1 = Section2:CreateToggle("Enable WalkSpeed/JumpPower", Settings.Go, function(State)
Settings.Go = State
RunService.Stepped:connect(
    function()
        if Settings.Go then
            Settings.Speed = Settings.WalkSpeed
       	    if Player.Character:FindFirstChildOfClass('Humanoid').UseJumpPower then
			Player.Character:WaitForChild('Humanoid').JumpPower = Settings.JumpPower
		    else
			Player.Character:WaitForChild('Humanoid').JumpHeight  = Settings.JumpPower
			end 
            if not UserInputService.WindowFocusReleased then
                setfpscap(Settings.Fps)
            end
        end
    end
)

end)

local TextBox1 = Section2:CreateTextBox("Fps Cap", "Only numbers", true, function(Value)
    Settings.Fps = Value
end)

local TextBox1 = Section2:CreateTextBox("WalkSpeed", "Only numbers", true, function(Value)
    Settings.WalkSpeed = Value
end)
local TextBox1 = Section2:CreateTextBox("JumpPower", "Only numbers", true, function(Value)
    Settings.JumpPower = Value
end)



local Toggle1 = Section2:CreateToggle("Infinite Jump", Settings.InfiniteJump, function(State)
Settings.InfiniteJump = State
UserInputService.JumpRequest:connect(
    function()
        if Settings.InfiniteJump then
            Player.Character:FindFirstChildOfClass "Humanoid":ChangeState("Jumping")
        end
    end
)
end)

local ESP = loadstring(game:HttpGet("https://raw.githubusercontent.com/1201for/V.G-Hub/main/Karrot-Esp"))()

local Toggle1 = Section1:CreateToggle("Enable Esp", Settings.Esp, function(State)
    Settings.Esp = State
    ESP:Toggle(Settings.Esp)
end)

local Toggle1 = Section1:CreateToggle("PLayer Esp", Settings.PlayerEsp, function(State)
    Settings.PlayerEsp = State
    ESP.Players = Settings.PlayerEsp
end)
local Toggle1 = Section1:CreateToggle("Tracers Esp", Settings.Tracers, function(State)
    Settings.Tracers = State
    ESP.Tracers = Settings.Tracers
end)
local Toggle1 = Section1:CreateToggle("Name Esp", Settings.EspNames, function(State)
    ESP.Names = Settings.EspNames
    Settings.EspNames = State
end)
local Toggle1 = Section1:CreateToggle("Boxes Esp", Settings.Boxes, function(State)
    Settings.Boxes = State
    ESP.Boxes = Settings.Boxes
end)

local Toggle1 = Section2:CreateToggle("Invisicam", Settings.Sorry, function(State)
Settings.Sorry = State
if Settings.Sorry then
    Player.DevCameraOcclusionMode = "Invisicam"
else
    Player.DevCameraOcclusionMode = "Zoom"
end
end)

local Toggle1 = Section2:CreateToggle("N Noclip", Settings.Sex1, function(State)
noclips = false
Settings.Sex1 = State
Player:GetMouse().KeyDown:connect(
    function(v)
        if v == "n" then
            if Settings.Sex1 then
                noclips = not noclips
                for i, v in pairs(Player.Character:GetChildren()) do
                    if v:IsA("BasePart") then
                        pcall(function()
                        v.CanCollide = false
                        end)
                    end
                end
            end
        end
    end
)
RunService.Stepped:connect(
    function()
        if noclips then
            for i, v in pairs(Player.Character:GetChildren()) do
                if v:IsA("BasePart") then
                    pcall(function()
                    v.CanCollide = false
                    end)
                end
            end
        end
    end
)

end)

local Toggle1 = Section2:CreateToggle("G Noclip", Settings.Sex, function(State)
Settings.Sex = State
noclip = false
RunService.Stepped:connect(
    function()
        if noclip then
            Player.Character.Humanoid:ChangeState(11)
        end
    end
)
mouse = Player:GetMouse()
Player:GetMouse().KeyDown:connect(
    function(v)
        if v == "g" then
            if Settings.Sex then
                noclip = not noclip
                Player.Character.Humanoid:ChangeState(11)
            end
        end
    end
)
end)

local Toggle1 = Section2:CreateToggle("H Fly", Settings.CFLY, function(State)
Settings.CFLY = State

d = false
RunService.Stepped:connect(
    function()
        if d then
            KO()
            if Player.Character and Player.Character:FindFirstChild("Head") then
            Player.Character:FindFirstChildOfClass("Humanoid").PlatformStand = true
            Player.Character:WaitForChild("Head").Anchored = true
            end 
            elseif Settings.CFLY or not d then
            Player.Character:FindFirstChildOfClass("Humanoid").PlatformStand = false
            Player.Character:WaitForChild("Head").Anchored = false
        end
    end
)
Player:GetMouse().KeyDown:connect(
    function(v)
        if v == "h" then
            if Settings.CFLY then
                d = not d
                KO()
                
            end
        end
    end
)

end)

local Button1 = Section2:CreateButton("Anti Lag", function()
for _, v in pairs(Workspace:GetDescendants()) do
    if v:IsA("BasePart") and not v.Parent:FindFirstChild("Humanoid") then
        v.Material = Enum.Material.SmoothPlastic
        if v:IsA("Texture") then
            v:Destroy()
        end
    end
end
end)

local Button1 = Section2:CreateButton("Teleport to RandomPlayer", function()
local randomPlayer = game.Players:GetPlayers()[math.random(1, #game.Players:GetPlayers())]

Player.Character.HumanoidRootPart.CFrame =
    CFrame.new(
    Vector3.new(
        randomPlayer.Character.Head.Position.X,
        randomPlayer.Character.Head.Position.Y,
        randomPlayer.Character.Head.Position.Z
    )
)
end)
local Button1 = Section2:CreateButton("Lag Switch F3", function()
local ass = false
local bitch = settings()

game:service "UserInputService".InputEnded:connect(
    function(i)
        if i.KeyCode == Enum.KeyCode.F3 then
            ass = not ass
            bitch.Network.IncomingReplicationLag = ass and 10 or 0
        end
    end
)
 end) 
local Button1 = Section2:CreateButton("ServerHop", function()
local PlaceID = game.PlaceId
local AllIDs = {}
local foundAnything = ""
local actualHour = os.date("!*t").hour
local Deleted = false
local File = pcall(function()
    AllIDs = game:GetService('HttpService'):JSONDecode(readfile("NotSameServers.json"))
end)
if not File then
    table.insert(AllIDs, actualHour)
    writefile("NotSameServers.json", game:GetService('HttpService'):JSONEncode(AllIDs))
end
function TPReturner()
    local Site;
    if foundAnything == "" then
        Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100'))
    else
        Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100&cursor=' .. foundAnything))
    end
    local ID = ""
    if Site.nextPageCursor and Site.nextPageCursor ~= "null" and Site.nextPageCursor ~= nil then
        foundAnything = Site.nextPageCursor
    end
    local num = 0;
    for i,v in pairs(Site.data) do
        local Possible = true
        ID = tostring(v.id)
        if tonumber(v.maxPlayers) > tonumber(v.playing) then
            for _,Existing in pairs(AllIDs) do
                if num ~= 0 then
                    if ID == tostring(Existing) then
                        Possible = false
                    end
                else
                    if tonumber(actualHour) ~= tonumber(Existing) then
                        local delFile = pcall(function()
                            delfile("NotSameServers.json")
                            AllIDs = {}
                            table.insert(AllIDs, actualHour)
                        end)
                    end
                end
                num = num + 1
            end
            if Possible == true then
                table.insert(AllIDs, ID)
                wait()
                pcall(function()
                    writefile("NotSameServers.json", game:GetService('HttpService'):JSONEncode(AllIDs))
                    wait()
                    game:GetService("TeleportService"):TeleportToPlaceInstance(PlaceID, ID, Player)
                end)
                wait(4)
            end
        end
    end
end

function Teleport()
    while wait() do
        pcall(function()
            TPReturner()
            if foundAnything ~= "" then
                TPReturner()
            end
        end)
    end
end

-- If you'd like to use a script before server hopping (Like a Automatic Chest collector you can put the Teleport() after it collected everything.
Teleport() 
end)
local Button1 = Section2:CreateButton("Rejoin", function()
game:GetService("TeleportService"):Teleport(game.PlaceId, Player) end)

local Toggle3 = Section3:CreateToggle("UI Toggle", nil, function(State)
	Window:Toggle(State)
end)
Toggle3:CreateKeybind(tostring(Config.Keybind):gsub("Enum.KeyCode.", ""), function(Key)
	Config.Keybind = Enum.KeyCode[Key]
end)
Toggle3:SetState(true)
Section3:CreateLabel("Credits DekuDimz#7960")
Section3:CreateLabel("Credits AlexR32#3232 Ui")
Section3:CreateLabel("Credits Doggo")
Section3:CreateLabel("Credits Fliex")
local Colorpicker3 = Section3:CreateColorpicker("UI Color", function(Color)
	Window:ChangeColor(Color)
end)
Colorpicker3:UpdateColor(Config.Color)

-- credits to jan for patterns
local Dropdown3 = Section4:CreateDropdown("Image", {"Default","Hearts","Abstract","Hexagon","Circles","Lace With Flowers","Floral"}, function(Name)
	if Name == "Default" then
		Window:SetBackground("2151741365")
	elseif Name == "Hearts" then
		Window:SetBackground("6073763717")
	elseif Name == "Abstract" then
		Window:SetBackground("6073743871")
	elseif Name == "Hexagon" then
		Window:SetBackground("6073628839")
	elseif Name == "Circles" then
		Window:SetBackground("6071579801")
	elseif Name == "Lace With Flowers" then
		Window:SetBackground("6071575925")
	elseif Name == "Floral" then
		Window:SetBackground("5553946656")
	end
end)
Dropdown3:SetOption("Default")

local Colorpicker4 = Section4:CreateColorpicker("Color", function(Color)
	Window:SetBackgroundColor(Color)
end)
Colorpicker4:UpdateColor(Color3.new(1,1,1))

local Slider3 = Section4:CreateSlider("Transparency",0,1,nil,false, function(Value)
	Window:SetBackgroundTransparency(Value)
end)
Slider3:SetValue(0)

local Slider4 = Section4:CreateSlider("Tile Scale",0,1,nil,false, function(Value)
	Window:SetTileScale(Value)
end)
Slider4:SetValue(0.5)
spawn(function()
while wait() do
Save()
end end)
