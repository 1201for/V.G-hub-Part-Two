local Config = {
    WindowName = "V.G Hub",
	Color = Color3.fromRGB(255,128,64),
	Keybind = Enum.KeyCode.RightControl
}
repeat wait() until game:IsLoaded() wait()
game:GetService("Players").LocalPlayer.Idled:connect(function()
game:GetService("VirtualUser"):ClickButton2(Vector2.new())
end)


local K = require(game:GetService("ReplicatedStorage").Modules.Bins.PortData)
for i,v in pairs(K) do wait(1)
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(v)
end


getgenv().Speed = 35
game.Players.LocalPlayer:GetMouse().KeyDown:connect(function(v)
	if v == "0" then --"Shift to run" 0 == shift
		print("Running")
		game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = getgenv().Speed 
	end
end)

game.Players.LocalPlayer:GetMouse().KeyUp:connect(function(v)
	if v == "0" then
		game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = 25
	end
end)

local OldNameCall
OldNameCall =
    hookmetamethod(
    game,
    "__newindex",
    function(A, B, C)
        if (not checkcaller() and A.ClassName == "Humanoid" and (B == "WalkSpeed" or B == "JumpPower")) then
            return
        end
        return OldNameCall(A, B, C)
    end
)


local KO = {}
for i, v in pairs(game:GetService("Workspace").WORLD:GetDescendants()) do
    if v:IsA("Folder") and v.Parent.Name == "Arenas" then
        table.insert(KO,v.Name)
    end
end


local KOS = {}
for i, v in pairs(game:GetService("Workspace").WORLD:GetDescendants()) do
    if v:IsA("Folder") and v.Parent.Name == "Arenas" then
        table.insert(KOS,v.Name)
    end
end

game:GetService("RunService").Stepped:connect(
    function()
        if game.Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart"):FindFirstChild("PlayerHUD") then
            game.Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart"):WaitForChild("PlayerHUD"):remove()
        end
    end
)
local R = require(game:GetService("ReplicatedStorage").Modules.Bins.RebirthData)
Rebirths = {}
for i,v in pairs(R) do
table.insert(Rebirths,i)
end 

getgenv().Speed = 300
local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/1201for/V.G-Hub/main/test"))()
local Window = Library:CreateWindow(Config, game:GetService("CoreGui"))

local Tab1 = Window:CreateTab("Mimic")
local Tab2 = Window:CreateTab("UI Settings")

local Section1 = Tab1:CreateSection("")
local Section2 = Tab1:CreateSection("")
local Section3 = Tab2:CreateSection("Menu")
local Section4 = Tab2:CreateSection("Background")

local Toggle1 = Section1:CreateToggle("Auto Aerna", nil, function(State)
getgenv().O = State
game:GetService("RunService").Stepped:connect(
    function()
        if getgenv().O and getgenv().System ~= "WalkTo" then
            game.Players.LocalPlayer.Character:WaitForChild("Humanoid"):ChangeState(11)
        end
    end
)
for i, v in pairs(game:GetService("Workspace").WORLD:GetChildren()) do
    if v:IsA("Folder") then
        for i, v in pairs(v:GetChildren()) do
            if v.Name == "Arenas" and v:FindFirstChild(KO) then
                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame =
                    v[KO]:WaitForChild("Detect").CFrame * CFrame.new(0, 0, 0) * CFrame.Angles(0, 0, 0)
            end
        end
    end
end

while getgenv().O do
    wait()
    pcall(
        function()
            if
                game:GetService("Players").LocalPlayer.PlayerGui.UI.Progress.Inner.Progress.Text == "100.00%" or
                    game:GetService("Players").LocalPlayer.PlayerGui.UI.Progress.Visible == false
             then
                game:GetService("ReplicatedStorage").Remotes.JoinLeaveArena:FireServer(KO, true)
                for i, v in pairs(game:GetService("Workspace").WORLD:GetChildren()) do
                    if v:IsA("Folder") then
                        for i, v in pairs(v:GetChildren()) do
                            if v.Name == "Arenas" and v:FindFirstChild(KO) then
                                if getgenv().System == "Teleport" then
                                    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame =
                                        v[KO].Detect.CFrame * CFrame.new(0, 0, 0) * CFrame.Angles(0, 0, 0)
                                end
                                if getgenv().System == "Tween" then
                                    local Time =
                                        (v[KO].Detect.CFrame.p + Vector3.new(0, -5, 3) -
                                        game.Players.LocalPlayer.Character.HumanoidRootPart.Position).magnitude /
                                        getgenv().Speed
                                    local Info = TweenInfo.new(Time, Enum.EasingStyle.Linear)
                                    local Tween =
                                        game:GetService("TweenService"):Create(
                                        game.Players.LocalPlayer.Character.HumanoidRootPart,
                                        Info,
                                        {
                                            CFrame = CFrame.new(v[KO].Detect.CFrame.p + Vector3.new(0, 0, 0))
                                        }
                                    )
                                    Tween:Play()
                                end
                                if getgenv().System == "WalkTo" then
                                    game.Players.LocalPlayer.Character.Humanoid:MoveTo(v[KO].Detect.CFrame.p)
                                end
                            end
                        end
                    end
                end
            end
            for i, v in pairs(game:GetService("Workspace").WORLD:GetChildren()) do
                if v:IsA("Folder") then
                    for i, v in pairs(v:GetChildren()) do
                        if v.Name == "Arenas" and v:FindFirstChild(KO) then
                            for i, v in pairs(v[KO].Enemies:GetChildren()) do
                                if v:IsA("Model") and v:FindFirstChild("HumanoidRootPart") then
                                    if getgenv().System == "Teleport" then
                                        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame =
                                            v.HumanoidRootPart.CFrame * CFrame.new(0, -5, 0) * CFrame.Angles(90, 0, 0)
                                    end
                                    if getgenv().System == "Tween" then
                                        local Time =
                                            (v.HumanoidRootPart.CFrame.p + Vector3.new(0, -5, 3) -
                                            game.Players.LocalPlayer.Character.HumanoidRootPart.Position).magnitude /
                                            getgenv().Speed
                                        local Info = TweenInfo.new(Time, Enum.EasingStyle.Linear)
                                        local Tween =
                                            game:GetService("TweenService"):Create(
                                            game.Players.LocalPlayer.Character.HumanoidRootPart,
                                            Info,
                                            {
                                                CFrame = CFrame.new(v.HumanoidRootPart.CFrame.p + Vector3.new(0, -5, 0))
                                            }
                                        )
                                        Tween:Play()
                                    end
                                    if getgenv().System == "WalkTo" then
                                        game.Players.LocalPlayer.Character.Humanoid:MoveTo(v.HumanoidRootPart.CFrame.p)
                                    end
                                    game:GetService("ReplicatedStorage").Remotes.Melee:FireServer("Melee")
                                end
                            end
                        end
                    end
                end
            end
        end
    )
end


end)
local Dropdown1 = Section1:CreateDropdown("Farm Modes", {"Teleport","Tween","WalkTo"}, function(String)
	getgenv().System = String
end)
Dropdown1:SetOption("Teleport")

local Dropdown1 = Section1:CreateDropdown("Arenas", KO, function(String)
	KO = String
end)
local Toggle1 = Section1:CreateToggle("Auto Rebirth", nil, function(State)
Rebirth = State
while wait() and Rebirth do 
    pcall(function()
    local numbers =
        string.match(game:GetService("Players").LocalPlayer.PlayerGui.UI.HotbarArea.Hotbar.Health.Level.Text, "%d")
    if tonumber(numbers) >= 300 then
        game:GetService("ReplicatedStorage").Remotes.Rebirth:InvokeServer()
    end
    end)
end
end)

local Toggle1 = Section1:CreateToggle("Auto Rebirth Upgrades", nil, function(State)
Spend = State
while Spend do
    wait()
    pcall(
        function()
            game:GetService("ReplicatedStorage").Remotes.SpendRebirthPoint:FireServer(Rebirths)
        end
    )
end
end)

local Dropdown1 = Section1:CreateDropdown("Rebirth Upgrades", Rebirths, function(String)
	Rebirths = String
end)

local Toggle1 = Section1:CreateToggle("Auto Abilty", nil, function(State)
ee = State
while ee do wait()
for i, v in pairs(game:GetService("Players").LocalPlayer.PlayerGui.UI.HotbarArea.Hotbar.AbilityButtons:GetChildren()) do
    if v:IsA("Frame") then

        game:GetService("VirtualInputManager"):SendKeyEvent(true, v:FindFirstChild("Number").Text, false, game)
    end
end
end 

end)

local Toggle1 = Section1:CreateToggle("no Duration Abilitys", nil, function(State)
getgenv().sus = State
local F = require(game:GetService("ReplicatedStorage").Modules.Bins.AbilityData)
for i, v in pairs(F) do
    if getgenv().sus then
        v.Duration = 0.5
    else
        v.Duration = 2
    end
end
end)


local Toggle1 = Section1:CreateToggle("Auto Collect", nil, function(State)
orr = State
while orr or getgenv().O do
    wait(1)
    for i, v in pairs(game:GetService("Workspace").FX:GetChildren()) do
        if v:FindFirstChild("BodyGyro") then wait(0.002)
            v.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
            game:GetService("ReplicatedStorage").Remotes.Coins:FireServer("Collect", v.Name)
            game:GetService("ReplicatedStorage").Remotes.Coins:FireServer("Claim", v.Name)
        end
    end
end

end)




local Toggle1 = Section1:CreateToggle("Jesus Christ WalkOnWater", nil, function(State)
getgenv().Hent = State
for i, v in pairs(game:GetService("Workspace").Ocean:GetChildren()) do
    if v:IsA("BasePart") and v.CanCollide == false then
        if getgenv().Hent then
        v.CanCollide = true
        else
        v.CanCollide = false
        end
end
end
end)


local Toggle1 = Section1:CreateToggle("Auto Breakables", nil, function(State)
ii = State
game:GetService("RunService").Stepped:connect(
    function()
        if ii then
            game.Players.LocalPlayer.Character:WaitForChild("Humanoid"):ChangeState(11)
        end
    end
)
while ii do
    wait(1)
    pcall(
        function()
            for i, v in pairs(game:GetService("Workspace")["SPAWNED_CHESTS"]:GetChildren()) do
                if v:IsA("Model") and v:FindFirstChild("Part") then

                    
                    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v:FindFirstChild("Part").CFrame
                end
            end
            game:GetService("ReplicatedStorage").Remotes.Melee:FireServer("Melee")
        end
    )
end

end)
local Button1 = Section1:CreateButton("Teleport to Selected Arena", function()

for i, v in pairs(game:GetService("Workspace").WORLD:GetDescendants()) do
    if v.Name == KOS and v:IsA("Folder") and v.Parent.Name == "Arenas"  then
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v.Bounds.CFrame
    end
end
end)

local Dropdown1 = Section1:CreateDropdown("Aernas", KOS, function(String)
    KOS = String
end)
local Toggle1 = Section1:CreateToggle("Enable Reset", nil, function(State)
deeznuts = State

while wait() do
    pcall(
        function()
            if deeznuts then
                game:GetService("StarterGui"):SetCore("ResetButtonCallback", true)
            else
                game:GetService("StarterGui"):SetCore("ResetButtonCallback", false)
            end
        end
    )
end
end)

local Toggle1 = Section1:CreateToggle("FullBright", nil, function(State)
FullBright = State
        if FullBright then
            game:GetService("Lighting").Ambient = Color3.new(1, 1, 1)
            game:GetService("Lighting").ColorShift_Bottom = Color3.new(1, 1, 1)
            game:GetService("Lighting").ColorShift_Top = Color3.new(1, 1, 1)
        else
            game:GetService("Lighting").Ambient = Color3.new(0, 0, 0)
            game:GetService("Lighting").ColorShift_Bottom = Color3.new(0, 0, 0)
            game:GetService("Lighting").ColorShift_Top = Color3.new(0, 0, 0)
        end
game.Lighting.Changed:connect(
    function()
        if FullBright then
            game:GetService("Lighting").Ambient = Color3.new(1, 1, 1)
            game:GetService("Lighting").ColorShift_Bottom = Color3.new(1, 1, 1)
            game:GetService("Lighting").ColorShift_Top = Color3.new(1, 1, 1)
        else
            game:GetService("Lighting").Ambient = Color3.new(0, 0, 0)
            game:GetService("Lighting").ColorShift_Bottom = Color3.new(0, 0, 0)
            game:GetService("Lighting").ColorShift_Top = Color3.new(0, 0, 0)
        end
    end
) 
end)


local ESP = loadstring(game:HttpGet("https://raw.githubusercontent.com/1201for/V.G-Hub/main/Karrot-Esp"))()

local Toggle1 = Section1:CreateToggle("Player Esp", nil, function(State)
    ESP:Toggle(State)
end)
local Toggle1 = Section1:CreateToggle("Tracers Esp", nil, function(State)
    ESP.Tracers = State
end)
local Toggle1 = Section1:CreateToggle("Name Esp", nil, function(State)
    ESP.Names = State
end)
local Toggle1 = Section1:CreateToggle("Boxes Esp", nil, function(State)
    ESP.Boxes = State
end)



local TextBox1 = Section2:CreateTextBox("Sprint Speed", "Only numbers", true, function(Value)
    getgenv().Speed = Value
end)
local TextBox1 = Section2:CreateTextBox("JumpPower", "Only numbers", true, function(Value)
    game.Players.LocalPlayer.Character.Humanoid.JumpPower = Value
end)
local Toggle1 = Section2:CreateToggle("Infinite Jump", nil, function(State)
Infinite = State
game:GetService("UserInputService").JumpRequest:connect(function()
	if Infinite then
		game:GetService"Players".LocalPlayer.Character:FindFirstChildOfClass'Humanoid':ChangeState("Jumping")
	end
end) end)


local Toggle1 = Section2:CreateToggle("G PlatFormNoclip", nil, function(State)
yes44 = State
noclip = false
game:GetService("RunService").Stepped:connect(
    function()
        if noclip then
            game.Players.LocalPlayer.Character.Humanoid:ChangeState(11)
        end
    end
)
game.Players.LocalPlayer:GetMouse().KeyDown:connect(
    function(key)
        if key == "g" then
            if yes44 then
                noclip = not noclip
                game.Players.LocalPlayer.Character.Humanoid:ChangeState(11)
            end
        end
    end
)
end)
local Toggle1 = Section2:CreateToggle("N NonePlatFormNoclip", nil, function(State)
hoe = State
game.Players.LocalPlayer:GetMouse().KeyDown:connect(
    function(v)
        if v == "n" then
            NoClip = not NoClip
            game:GetService("RunService").Stepped:connect(
                function()
                    if NoClip then
                     if hoe then
                        for i, v in pairs(game.Players.LocalPlayer.Character:GetDescendants()) do
                            pcall(
                                function()
                                    if v.ClassName == "Part" or v.ClassName == "MeshPart" then
                                        v.CanCollide = false
                                    end
                                end
                            )
                        end
                    end
                end
            end
            )
        end
    end
)
end)


local Toggle1 = Section2:CreateToggle("B Fly", nil, function(State)
sexu = State
local Max = 0
local Players = game.Players
local LP = Players.LocalPlayer
local Mouse = LP:GetMouse()
Mouse.KeyDown:connect(function(k)
if k:lower() == 'b' then
Max = Max + 1
getgenv().Fly = false
if sexu then
local T = LP.Character.HumanoidRootPart
local S = {
F = 0,
B = 0,
L = 0,
R = 0
}
local S2 = {
F = 0,
B = 0,
L = 0,
R = 0
}
local SPEED = 5
local function FLY()
getgenv().Fly = true
local BodyGyro = Instance.new('BodyGyro', T)
local BodyVelocity = Instance.new('BodyVelocity', T)
BodyGyro.P = 90000
BodyGyro.maxTorque = Vector3.new(9e9,9e9,9e9)
BodyGyro.cframe = T.CFrame
BodyVelocity.velocity = Vector3.new(0, 0, 0)
BodyVelocity.maxForce = Vector3.new(9e9, 9e9, 9e9)
spawn(function()
repeat
wait()
LP.Character.Humanoid.PlatformStand = true
if S.L + S.R ~= 0 or S.F + S.B ~= 0 then
SPEED = 200
elseif not (S.L + S.R ~= 0 or S.F + S.B ~= 0) and SPEED ~= 0 then
SPEED = 0
end
if (S.L + S.R) ~= 0 or (S.F + S.B) ~= 0 then
BodyVelocity.velocity = ((game.Workspace.CurrentCamera.CoordinateFrame.lookVector * (S.F + S.B)) + ((game.Workspace.CurrentCamera.CoordinateFrame * CFrame.new(S.L + S.R, (S.F + S.B) * 0.2, 0).p) - game.Workspace.CurrentCamera.CoordinateFrame.p)) * SPEED
S2 = {
F = S.F,
B = S.B,
L = S.L,
R = S.R
}
elseif (S.L + S.R) == 0 and (S.F + S.B) == 0 and SPEED ~= 0 then
BodyVelocity.velocity = ((game.Workspace.CurrentCamera.CoordinateFrame.lookVector * (S2.F + S2.B)) + ((game.Workspace.CurrentCamera.CoordinateFrame * CFrame.new(S2.L + S2.R, (S2.F + S2.B) * 0.2, 0).p) - game.Workspace.CurrentCamera.CoordinateFrame.p)) * SPEED
else
BodyVelocity.velocity = Vector3.new(0, 0.1, 0)
end
BodyGyro.cframe = game.Workspace.CurrentCamera.CoordinateFrame
until not getgenv().Fly
S = {
F = 0,
B = 0,
L = 0,
R = 0
}
S2 = {
F = 0,
B = 0,
L = 0,
R = 0
}
SPEED = 0
BodyGyro:destroy()
BodyVelocity:destroy()
LP.Character.Humanoid.PlatformStand = false
end)
end
Mouse.KeyDown:connect(function(k)
if k:lower() == 'w' then
S.F = 1
elseif k:lower() == 's' then
S.B = -1
elseif k:lower() == 'a' then
S.L = -1
elseif k:lower() == 'd' then
S.R = 1
end
end)
Mouse.KeyUp:connect(function(k)
if k:lower() == 'w' then
S.F = 0
elseif k:lower() == 's' then
S.B = 0
elseif k:lower() == 'a' then
S.L = 0
elseif k:lower() == 'd' then
S.R = 0
end
end)
FLY()
if Max == 2 then
getgenv().Fly = false
print("off")
Max = 0
end
end
end
end)
end)
local Button1 = Section2:CreateButton("Anti Lag", function()
for _, v in pairs(game:GetService("Workspace"):GetDescendants()) do
    if v:IsA("BasePart") and not v.Parent:FindFirstChild("Humanoid") then --- i stole this from the actual game LOL >-<
        v.Material = Enum.Material.SmoothPlastic
        if v:IsA("Texture") then
            v:Destroy()
        end
    end
end

end)

local Button1 = Section2:CreateButton("Teleport to RandomPlayer", function()
local randomPlayer = game.Players:GetPlayers()[math.random(1, #game.Players:GetPlayers())]

game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame =
    CFrame.new(
    Vector3.new(
        randomPlayer.Character.Head.Position.X,
        randomPlayer.Character.Head.Position.Y,
        randomPlayer.Character.Head.Position.Z
    )
)
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(Vector3.new(randomPlayer.Character.Head.Position.X, randomPlayer.Character.Head.Position.Y, randomPlayer.Character.Head.Position.Z))
end)
local Button1 = Section2:CreateButton("Lag Switch F3", function()
local X = false
local C = settings()

game:service "UserInputService".InputEnded:connect(
    function(V)
        if V.KeyCode == Enum.KeyCode.F3 then
            X = not X
            C.Network.IncomingReplicationLag = X and 10 or 0
        end
    end
)
end) 
local Button1 = Section2:CreateButton("ServerHop", function()
local PlaceID = game.PlaceId
local AllIDs = {}
local foundAnything = ""
local actualHour = os.date("!*t").hour
local Deleted = false
local File = pcall(function()
    AllIDs = game:GetService('HttpService'):JSONDecode(readfile("NotSameServers.json"))
end)
if not File then
    table.insert(AllIDs, actualHour)
    writefile("NotSameServers.json", game:GetService('HttpService'):JSONEncode(AllIDs))
end
function TPReturner()
    local Site;
    if foundAnything == "" then
        Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100'))
    else
        Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100&cursor=' .. foundAnything))
    end
    local ID = ""
    if Site.nextPageCursor and Site.nextPageCursor ~= "null" and Site.nextPageCursor ~= nil then
        foundAnything = Site.nextPageCursor
    end
    local num = 0;
    for i,v in pairs(Site.data) do
        local Possible = true
        ID = tostring(v.id)
        if tonumber(v.maxPlayers) > tonumber(v.playing) then
            for _,Existing in pairs(AllIDs) do
                if num ~= 0 then
                    if ID == tostring(Existing) then
                        Possible = false
                    end
                else
                    if tonumber(actualHour) ~= tonumber(Existing) then
                        local delFile = pcall(function()
                            delfile("NotSameServers.json")
                            AllIDs = {}
                            table.insert(AllIDs, actualHour)
                        end)
                    end
                end
                num = num + 1
            end
            if Possible == true then
                table.insert(AllIDs, ID)
                wait()
                pcall(function()
                    writefile("NotSameServers.json", game:GetService('HttpService'):JSONEncode(AllIDs))
                    wait()
                    game:GetService("TeleportService"):TeleportToPlaceInstance(PlaceID, ID, game.Players.LocalPlayer)
                end)
                wait(4)
            end
        end
    end
end

function Teleport()
    while wait() do
        pcall(function()
            TPReturner()
            if foundAnything ~= "" then
                TPReturner()
            end
        end)
    end
end

-- If you'd like to use a script before server hopping (Like a Automatic Chest collector you can put the Teleport() after it collected everything.
Teleport() 
end)
local Button1 = Section2:CreateButton("Rejoin", function()
game:GetService("TeleportService"):Teleport(game.PlaceId, game:GetService("Players").LocalPlayer) end)

local Toggle3 = Section3:CreateToggle("UI Toggle", nil, function(State)
	Window:Toggle(State)
end)
Toggle3:CreateKeybind(tostring(Config.Keybind):gsub("Enum.KeyCode.", ""), function(Key)
	Config.Keybind = Enum.KeyCode[Key]
end)
Toggle3:SetState(true)
Section3:CreateLabel("Credits DekuDimz#7960")
Section3:CreateLabel("Credits AlexR32#3232 Ui")
Section3:CreateLabel("Credits Sensei Joshy#1060")
local Colorpicker3 = Section3:CreateColorpicker("UI Color", function(Color)
	Window:ChangeColor(Color)
end)
Colorpicker3:UpdateColor(Config.Color)
-- credits to jan for patterns
local Dropdown3 = Section4:CreateDropdown("Image")
local Option7 = Dropdown3:AddOption("Default", function(String)
	Window:SetBackground("2151741365")
end)
local Option8 = Dropdown3:AddOption("Hearts", function(String)
	Window:SetBackground("6073763717")
end)
local Option9 = Dropdown3:AddOption("Abstract", function(String)
	Window:SetBackground("6073743871")
end)
local Option10 = Dropdown3:AddOption("Hexagon", function(String)
	Window:SetBackground("6073628839")
end)
local Option11 = Dropdown3:AddOption("Circles", function(String)
	Window:SetBackground("6071579801")
end)
local Option12 = Dropdown3:AddOption("Lace With Flowers", function(String)
	Window:SetBackground("6071575925")
end)
local Option13 = Dropdown3:AddOption("Floral", function(String)
	Window:SetBackground("5553946656")
end)
Option7:SetOption()

local Colorpicker4 = Section4:CreateColorpicker("Color", function(Color)
	Window:SetBackgroundColor(Color)
end)
Colorpicker4:UpdateColor(Color3.new(1,1,1))

local Slider3 = Section4:CreateSlider("Transparency",0,1,nil,false, function(Value)
	Window:SetBackgroundTransparency(Value)
end)
Slider3:SetValue(0)

local Slider4 = Section4:CreateSlider("Tile Scale",0,1,nil,false, function(Value)
	Window:SetTileScale(Value)
end)
Slider4:SetValue(0.5)

