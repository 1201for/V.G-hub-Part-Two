local Config = {
    WindowName = "V.G Hub",
	Color = Color3.fromRGB(255,128,64),
	Keybind = Enum.KeyCode.RightControl
}
repeat wait() until game:IsLoaded() wait()
game:GetService("Players").LocalPlayer.Idled:connect(function()
game:GetService("VirtualUser"):ClickButton2(Vector2.new())
end)
repeat wait() until game.Players.LocalPlayer.Character

local Name = "Dragon-Adventures.txt"

Des = {}
if makefolder then
    makefolder("V.G Hub")
end

local Settings

if
    not pcall(
        function()
            readfile("V.G Hub//" .. Name)
        end
    )
 then
    writefile("V.G Hub//" .. Name, game:service "HttpService":JSONEncode(Des))
end

Settings = game:service "HttpService":JSONDecode(readfile("V.G Hub//" .. Name))

local function Save()
    writefile("V.G Hub//" .. Name, game:service "HttpService":JSONEncode(Settings))
end

game:GetService("Players").LocalPlayer.PlayerGui.NodeGui.BoostFrame.ChildAdded:Connect(
    function(v)
        if v.ClassName == "Frame" and v:FindFirstChild("ClickButton") then
            wait(0.5)
            firesignal(v.ClickShadowButton.MouseButton1Down)
            firesignal(v.ClickButton.MouseButton1Down)
        end
    end
)



local OldNameCall = nil
OldNameCall =
    hookmetamethod(
    game,
    "__namecall",
    function(self, ...)
        local Args = {...}
    
        if getnamecallmethod() == "BreakJoints" then
            return true
        end
        if getnamecallmethod() == "Destroy" and self == game.Players.LocalPlayer.Character then 
            return nil
        end 
        return OldNameCall(self, unpack(Args))
    end
)
if game.PlaceId == 5777228223 then
spawn(
    function()
        while wait(3) do
            pcall(
                function()
                    for i, v in pairs(
                        game:GetService("Players").LocalPlayer.PlayerGui.MinigamesGui.RewardFrame.RewardsFrame:GetChildren(

                        )
                    ) do
                        if v.Name == "Default" and v.Visible == true then
                            v.ClaimButton.Size = UDim2.new(9e9, 9e9, 9e9, 9e9)
                            game:GetService("VirtualUser"):ClickButton1(Vector2.new(9e9,9e9))
                        end
                    end
                    if
                        game:GetService("Players").LocalPlayer.PlayerGui.MinigamesGui.RewardFrame.CloseButton.Visible ==
                            true
                     then
                        game:GetService("Players").LocalPlayer.PlayerGui.MinigamesGui.RewardFrame.CloseButton.Size =
                            UDim2.new(9e9, 9e9, 9e9, 9e9)
                        game:GetService("VirtualUser"):ClickButton1(Vector2.new(9e9,9e9))
                    end
                end
            )
        end
    end
)

end 

local function GetDragons()
  local Target
    for i, v in ipairs(game.Players.LocalPlayer.Character.Dragons:GetChildren()) do
        if v.ClassName == "Model" and v:FindFirstChild("HumanoidRootPart")  then
            Target = v
        end
    end
    return Target
end 
if game.PlaceId ~= 5777228223 then
pcall(function()
game:GetService("ReplicatedStorage").Remotes.SpinWheelRemote:InvokeServer()
game:GetService("ReplicatedStorage").Remotes.ClaimWheelRemote:FireServer()

game.StarterGui:SetCoreGuiEnabled(1, true)
game.StarterGui:SetCoreGuiEnabled(2, true)
game.StarterGui:SetCoreGuiEnabled(3, true)


end)
end
Worlds = {}
local Poop = require(game:GetService("ReplicatedStorage").Storage.Worlds.Worlds)
for i,v in pairs(Poop) do
table.insert(Worlds,v.Name .." " .. v.GameId)
end 



function Invis()
local Clone = game.Players.LocalPlayer.Character.LowerTorso.Root:Clone()
game.Players.LocalPlayer.Character.LowerTorso.Root:remove()
Clone.Parent = game.Players.LocalPlayer.Character.LowerTorso
end 




local AutoFishy = Instance.new("ScreenGui")
local CurrentFish = Instance.new("TextLabel")

--Properties:

AutoFishy.Name = "AutoFishy"
AutoFishy.Parent = game.CoreGui
AutoFishy.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

CurrentFish.Name = "CurrentFish"
CurrentFish.Parent = AutoFishy
CurrentFish.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
CurrentFish.BackgroundTransparency = 1.000
CurrentFish.Position = UDim2.new(0, 0, 0.339622647, 0)
CurrentFish.Size = UDim2.new(0, 112, 0, 28)
CurrentFish.Font = Enum.Font.SourceSans
CurrentFish.TextColor3 = Color3.fromRGB(255, 255, 255)
CurrentFish.TextScaled = true
CurrentFish.TextSize = 14.000
CurrentFish.TextWrapped = true

spawn(function()
local script = Instance.new('LocalScript', CurrentFish)
while wait() do
CurrentFish.Text = game:GetService("Players").LocalPlayer.Settings.CurrentFish.Value 
end end)



function getUserRole(user, group)
return user:GetRoleInGroup(group)
end
game.Players.PlayerAdded:Connect(function(player)
if getUserRole(player, 2919215) == "📝Tester" or getUserRole(player, 2919215) == "❤️Contributor"  
or  getUserRole(player, 2919215) == "📣Staff" or getUserRole(player, 2919215) == "💎Administrator" or getUserRole(player, 2919215) == "🔧Other Developer" or
getUserRole(player, 2919215) == "🛠️Developer" or getUserRole(player, 2919215) == "👑Co-Owner" or  getUserRole(player, 2919215) == "👑Owner" 
then
fuckyou() 
end
end)
function fuckyou()
local PlaceID = game.PlaceId
local AllIDs = {}
local foundAnything = ""
local actualHour = os.date("!*t").hour
local Deleted = false
function TPReturner()
    local Site;
    if foundAnything == "" then
        Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100'))
    else
        Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100&cursor=' .. foundAnything))
    end
    local ID = ""
    if Site.nextPageCursor and Site.nextPageCursor ~= "null" and Site.nextPageCursor ~= nil then
        foundAnything = Site.nextPageCursor
    end
    local num = 0;
    for i,v in pairs(Site.data) do
        local Possible = true
        ID = tostring(v.id)
        if tonumber(v.maxPlayers) > tonumber(v.playing) then
            for _,Existing in pairs(AllIDs) do
                if num ~= 0 then
                    if ID == tostring(Existing) then
                        Possible = false
                    end
                else
                    if tonumber(actualHour) ~= tonumber(Existing) then
                        local delFile = pcall(function()
                            delfile("NotSameServers.json")
                            AllIDs = {}
                            table.insert(AllIDs, actualHour)
                        end)
                    end
                end
                num = num + 1
            end
            if Possible == true then
                table.insert(AllIDs, ID)
                wait()
                pcall(function()
                    writefile("NotSameServers.json", game:GetService('HttpService'):JSONEncode(AllIDs))
                    wait()
                    game:GetService("TeleportService"):TeleportToPlaceInstance(PlaceID, ID, game.Players.LocalPlayer)
                end)
                wait(4)
            end
        end
    end
end

function Teleport()
    while wait() do
        pcall(function()
            TPReturner()
            if foundAnything ~= "" then
                TPReturner()
            end
        end)
    end
end

-- If you'd like to use a script before server hopping (Like a Automatic Chest collector you can put the Teleport() after it collected everything.
Teleport()
end
local OldNameCall
OldNameCall = hookmetamethod(game, "__newindex", function(A, B, ...)
    if not checkcaller()  and (B == "WalkSpeed" or B == "JumpPower") then
        return
    end
    return OldNameCall(A, B, ...)
end)


function lookAt(A, B)
    local Straight = (B - A).Unit
    local Up = Vector3.new(0, 1, 0)
    local Right = Straight:Cross(Up)
    local Up2 = Right:Cross(Straight)

    return CFrame.fromMatrix(B, Right, Up2)
end

healing = {}
for i, v in pairs(game:GetService("ReplicatedStorage").Storage.Items.Items.Healing:GetChildren()) do
     if v.ClassName == "ModuleScript" then
       r = require(v)
        for i,v in pairs(r) do
        table.insert(healing, i)
        end
    end
end



foods = {}
for i, v in pairs(game:GetService("ReplicatedStorage").Storage.Items.Items.Food:GetChildren()) do
    if v.ClassName == "ModuleScript" then
       g = require(v)
        for i,v in pairs(g) do
        table.insert(foods,i)
        end
    end
end
list = {}
for i, v in pairs(game:GetService("ReplicatedStorage").Storage.Items.Items.Food:GetChildren()) do
        if v.ClassName == "ModuleScript" then
       f = require(v)
        for i,v in pairs(f) do
        table.insert(list, i)
        end
    end
end
Dragon = {}
for i, v in pairs(game:GetService("Players").LocalPlayer.Data.Dragons:GetChildren()) do
    if v:FindFirstChild("Age") then
        table.insert(Dragon, v.Value)
    end
end
 
game.Players.LocalPlayer.Character.Humanoid.JumpPower = 50
game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = 30
local deku1 = {"SolsticeFlares", "SolsticeBoxes"}
local deku = {"Food", "Magic", "Resources"}

local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/1201for/V.G-Hub/main/test"))()
local Window = Library:CreateWindow(Config, game:GetService("CoreGui"))

local Tab1 = Window:CreateTab("Dragon Adventures")
local Tab2 = Window:CreateTab("UI Settings")

local Section1 = Tab1:CreateSection("AutoFarms")
local Section2 = Tab1:CreateSection("Misc")
local Section3 = Tab2:CreateSection("Menu")
local Section4 = Tab2:CreateSection("Background")

if game.PlaceId == 5777228223 then
    
local function getNearestOre()
    local TargetDistance = math.huge
    local Target
    for x, d in pairs(game:GetService("Workspace").Interactions.GalaxyEvent.OreMining.Sections:GetChildren()) do
        if d:IsA("Folder") then
            for x, d in pairs(d:GetChildren()) do
                if d:IsA("Model") and d:FindFirstChildWhichIsA("BasePart") then
                    local Mag =
                        (game.Players.LocalPlayer.Character.HumanoidRootPart.Position -
                        d:FindFirstChildWhichIsA("BasePart").Position).Magnitude
                    if Mag < TargetDistance then
                        TargetDistance = Mag
                        Target = d
                    end
                end
            end
        end
    end
    return Target
end
local Toggle1 = Section1:CreateToggle("Ore AutoFarm", Settings.Start, function(State) 
Settings.Start = State
game:GetService("RunService").Stepped:connect(
    function()
        if Settings.Start then
            for i, v in pairs(game.Players.LocalPlayer.Character.Dragons:GetChildren()) do
                if v:IsA("Model") then
                    for i, v in pairs(v:GetChildren()) do
                        if v:IsA("BasePart") then
                            v.CanCollide = false
                        end
                    end
                end
            end
            for i, v in pairs(game.Players.LocalPlayer.Character:GetChildren()) do
                if v:IsA("BasePart") then
                    v.CanCollide = false
                end
            end
        end
    end
)

while wait(1) and Settings.Start do
    pcall(
        function()
            for i, v in pairs(game.Players.LocalPlayer.Character.Dragons:GetChildren()) do
                if v:IsA("Model") then
                    v.HumanoidRootPart.CFrame =
                        CFrame.new(getNearestOre():FindFirstChildWhichIsA("BasePart").Position + Vector3.new(0, 10, 0))
                    game.Workspace.CurrentCamera.CFrame =
                        lookAt(
                        game.Players.LocalPlayer.Character.HumanoidRootPart.Position,
                        getNearestOre():FindFirstChildWhichIsA("BasePart").Position
                    )
                    game:GetService("VirtualInputManager"):SendKeyEvent(true, "F", false, game)
                    if game:GetService("Players").LocalPlayer.Data.GalaxyEvent2022.CrystalOre.Value >= 300 then
                        wait()

                        for i = 1, 2 do
                            game:GetService("ReplicatedStorage").Remotes.RepairProcessorRemote:FireServer(tostring(i))
                        end
                        v.HumanoidRootPart.CFrame =
                            game:GetService("Workspace").Interactions.GalaxyEvent.LocalStreamingModel.OreProcessor.Conveyor.ProcessPart.CFrame
                        wait(2)
                        game:GetService("VirtualInputManager"):SendKeyEvent(true, "E", false, game)

                        wait(15)
                        v.HumanoidRootPart.CFrame =
                            game:GetService("Workspace").Interactions.GalaxyEvent.LocalStreamingModel.OreProcessor.Conveyor.CollectPart.CFrame
                        wait(1)
                        game:GetService("VirtualInputManager"):SendKeyEvent(true, "E", false, game)
                    end
                end
            end
        end
    )
end

end)

Toggle1:AddToolTip("get on dragon and fly small dragons recommened")
end 

if game.PlaceId == 3475397644 then

for i, v in pairs(game:GetService("Workspace").Interactions:GetDescendants()) do
    if v:IsA("TextLabel") and v.Name:match("Player")  then
        if
            v.Text ==
                game:GetService("Players").LocalPlayer.PlayerGui.WorkspaceGui[
                    game.Players.LocalPlayer.Name .. "_DisplayGui"
                ].ContainerFrame.NameLabel.Text 
         then
             firetouchinterest(game.Players.LocalPlayer.Character.HumanoidRootPart, v.Parent.Parent.Parent.TeleportPart, 0)

        end
    end
end


repeat
    wait()
until game:GetService("Workspace").Interactions.Plots.Plots[game.Players.LocalPlayer.Name .. "_Plot"]:WaitForChild(
    "Base"
)


ss1 = {}
for i, v in pairs(game:GetService("ReplicatedStorage").Storage.Items.Items.Eggs:GetChildren()) do
          if v.ClassName == "ModuleScript" then
       f = require(v)
        for i,v in pairs(f) do
        table.insert(ss1, i)
        end
    end
end





local Toggle1 = Section1:CreateToggle("Auto Incubate Eggs", Settings.Incubate, function(State) 
Settings.Incubate = State
spawn(function()
while Settings.Incubate do
    wait()
    for i, v in pairs(
        game:GetService("Workspace").Interactions.Plots.Plots[game.Players.LocalPlayer.Name .. "_Plot"].Base.Buildings:GetDescendants(

        )
    ) do
        if v.Name == "Incubator" then
            if not v:FindFirstChild("Egg") then
                v.IncubateRemote:InvokeServer(Settings.Egg)
            end
            if v:FindFirstChild("Egg") then
                v.ClaimRemote:InvokeServer()
            end
        end
    end
end

end)
end)

local Dropdown1 = Section1:CreateDropdown("Eggs", ss1, function(String)
    Settings.Egg = String
end)

local Button1 = Section1:CreateButton("Clear Base", function()
game:GetService("Workspace").Interactions.Plots.Plots[game.Players.LocalPlayer.Name.."_Plot"].DeleteAllRemote:FireServer()
end)


local Button1 = Section1:CreateButton("GoTo Base", function()
for i, v in pairs(game:GetService("Workspace").Interactions:GetDescendants()) do
    if v:IsA("TextLabel") and v.Name:match("Player")  then
        if
            v.Text ==
                game:GetService("Players").LocalPlayer.PlayerGui.WorkspaceGui[
                    game.Players.LocalPlayer.Name .. "_DisplayGui"
                ].ContainerFrame.NameLabel.Text 
         then
             firetouchinterest(game.Players.LocalPlayer.Character.HumanoidRootPart, v.Parent.Parent.Parent.TeleportPart, 0)

        end
    end
end
end)

local Toggle1 = Section1:CreateToggle("Auto Heavest", Settings.AutoHeavest, function(State) 
Settings.AutoHeavest = State
spawn(function()
while Settings.AutoHeavest do wait(3)
    pcall(function()
    for i, v in pairs(
        game:GetService("Workspace").Interactions.Plots.Plots[game.Players.LocalPlayer.Name .. "_Plot"].Base.Buildings:GetDescendants(

        )
    ) do wait(0)
        if v.ClassName == "Model" and v:FindFirstChild("HarvestRemote") then
            v.HarvestRemote:InvokeServer()
        end
    end
    end)
end 
end)
end)
local Button1 = Section1:CreateButton("Sell All Foods", function()
    for i, v in pairs(game:GetService("Players").LocalPlayer.Data.Resources:GetChildren()) do
        if table.find(foods,v.Name) and v.Value ~= 0 then wait(0.5)
            game:GetService("ReplicatedStorage").Remotes.SellItemRemote:FireServer(
                {["Amount"] = v.Value, ["ItemName"] = v.Name}
            )
        end
    end
end)




local Toggle1 = Section1:CreateToggle("Alchemy AutoFarm", Settings.Alchemy, function(State) 
Settings.Alchemy = State
spawn(function()
while wait() and Settings.Alchemy do
    for i, v in pairs(
        game:GetService("Workspace").Interactions.Plots.Plots[game.Players.LocalPlayer.Name .. "_Plot"].Base.Buildings:GetDescendants(

        )
    ) do
        if v.ClassName == "Model" and v:FindFirstChild("HarvestRemote") then
            v.HarvestRemote:InvokeServer()
        end
    end
    for i, v in pairs(game:GetService("Players").LocalPlayer.Data.Resources:GetChildren()) do
        if v.Name == Settings.AlchemyFoods and v.Value ~= 0 then
    game:GetService("ReplicatedStorage").Remotes.RecycleResourceRemote:InvokeServer({[Settings.AlchemyFoods] = Settings.AlchemyFoodsamount})
    end end 
end
end)
end)

local Dropdown1 = Section1:CreateDropdown("Alchemy Foods",foods, function(String)
    Settings.AlchemyFoods = String
end)

local Dropdown1 = Section1:CreateDropdown("Alchemy Foods Amount",{1,5,10,15,20,25,50,75,100}, function(String)
    Settings.AlchemyFoodsamount = String
end)
Dropdown1:SetOption(tostring(1))

end



local Toggle1 = Section1:CreateToggle("Autocollect", Settings.AutoCollect, function(State)
Settings.AutoCollect = State

game:GetService("RunService").Stepped:connect(
    function()
        if Settings.AutoCollect then
            pcall(
                function()
                    game.Players.LocalPlayer.Character:WaitForChild("Humanoid"):ChangeState(11)
                end
            )
        end
    end
)
spawn(function()
while Settings.AutoCollect do
    wait()
    pcall(
        function()
            for i, v in pairs(game:GetService("Workspace").Interactions.Nodes.Harvest[Settings.CollectionItem].ActiveNodes:GetChildren()) do
                if v:IsA("Model") and v:FindFirstChildWhichIsA("BasePart") and Settings.AutoCollect then
                    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame =
                        v:FindFirstChildWhichIsA("BasePart").CFrame * CFrame.new(40, -3, 0)
                    wait(1)
                    repeat wait()
                    game.Players.LocalPlayer.Character.Humanoid:MoveTo(
                        v:FindFirstChildWhichIsA("BasePart").Position
                    )
                    wait(2)
                    game:GetService("VirtualInputManager"):SendKeyEvent(true, "E", false, game)
                    wait(6)
                    until v == nil or Settings.AutoCollect == false or v:FindFirstChild("Harvested").Value == true
                end
            end
        end
    )
end
end)
end)



local Dropdown1 = Section1:CreateDropdown("Collection Item", deku, function(String)
    Settings.CollectionItem = String
end)

local Button1 = Section1:CreateButton("FixShip", function()
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game:GetService("Workspace").Interactions.GalaxyEvent.ShipCrash.NPC.HumanoidRootPart.CFrame

wait(1)
game:GetService("VirtualInputManager"):SendKeyEvent(true, "E", false, game)
wait(2)
for i=1,10 do wait(1)
    game:GetService("VirtualUser"):ClickButton1(Vector2.new())
end 
for i,v in pairs(game:GetService("Workspace").Interactions.GalaxyEvent.ShipCrash.ShipFragments:GetChildren()) do
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v.CFrame
    wait(1)
    game:GetService("VirtualInputManager"):SendKeyEvent(true, "E", false, game)
end 
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game:GetService("Workspace").Interactions.GalaxyEvent.ShipCrash.NPC.HumanoidRootPart.CFrame

wait(1)
game:GetService("VirtualInputManager"):SendKeyEvent(true, "E", false, game)
            
           
end)
local Toggle1 = Section1:CreateToggle("Auto Egg", Settings.AutoEgg, function(State) 
Settings.AutoEgg = State
game:GetService("RunService").Stepped:connect(
    function()
        if Settings.AutoEgg then
            pcall(
                function()
                    game.Players.LocalPlayer.Character:WaitForChild("Humanoid"):ChangeState(11)
                end
            )
        end
    end
)
spawn(function()
while Settings.AutoEgg do
    wait()
    pcall(
        function()
            for i, v in pairs(game:GetService("Workspace").Interactions.Nodes.Harvest.Eggs.ActiveNodes:GetChildren()) do
                if v:IsA("Model") and v:FindFirstChildWhichIsA("BasePart") then
                         game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame =
                        v:FindFirstChildWhichIsA("BasePart").CFrame * CFrame.new(40, -3, 0)
                    wait(1)
                    repeat wait()
                    game.Players.LocalPlayer.Character.Humanoid:MoveTo(
                        v:FindFirstChildWhichIsA("BasePart").Position
                    )
                    wait(1)
                    if Settings.AutoEgg == false then
                        break
                    end
                    game:GetService("VirtualInputManager"):SendKeyEvent(true, "E", false, game)
                    wait(6)
                    until v == nil or Settings.AutoEgg == false or v.Harvested.Value == true
                end
            end
        end
    )
end
end)

end)
Toggle1:AddToolTip("Teleports to Eggs")

local Player = game.Players.LocalPlayer
local Pointer = Player.PlayerGui.FishingGui.ContainerFrame.ReelingFrame.BarLabel.InnerLabel.PointerLabel
local SafeBar = Player.PlayerGui.FishingGui.ContainerFrame.ReelingFrame.BarLabel.InnerLabel.SafeBarLabel
local Toggle1 = Section1:CreateToggle("Auto Fishing", Settings.AutoFish, function(State)
Settings.AutoFish = State

if Player.PlayerGui.FishingGui.ContainerFrame.Visible then
    if not Player.Character:FindFirstChild("FishingRod") and not Player.Backpack:FindFirstChild("FishingRod") then
        wait(.1)
        game:GetService("VirtualInputManager"):SendKeyEvent(true, "G", false, game)
    elseif Player.Backpack:FindFirstChild("FishingRod") then
        game:GetService("VirtualInputManager"):SendKeyEvent(true, "G", false, game)
        game.StarterGui:SetCore(
            "SendNotification",
            {
                Title = "Auto Fishing",
                Text = "You have to keep the game in focus otherwise it dosent work she added a stuiped check for VirtualInputManager"
            }
        )
    end
else
    game.StarterGui:SetCore(
        "SendNotification",
        {
            Title = "Auto Fishing",
            Text = "Sorry but for this to work i kinda need you to go to where you fish sorry not sorry"
        }
    )
end

if not Settings.AutoFish then
    Player.PlayerGui.FishingGui.ContainerFrame.ButtonsFrame.ReelButton.Size = UDim2.new(1, 0, 1, 0)
end
spawn(
    function()
        while Settings.AutoFish do
            wait()
            if Player.PlayerGui.FishingGui.ContainerFrame.Visible then
                pcall(
                    function()
                        if
                            not Player.Character:FindFirstChild("FishingRod") and
                                not Player.Backpack:FindFirstChild("FishingRod")
                         then
                            wait(2)
                            game:GetService("VirtualInputManager"):SendKeyEvent(true, "G", false, game)
                        elseif Player.Backpack:FindFirstChild("FishingRod") then
                            game:GetService("VirtualInputManager"):SendKeyEvent(true, "G", false, game)
                        end
                        mouse1click()
                        wait(3)
                        Player.PlayerGui.FishingGui.ContainerFrame.ButtonsFrame.ReelButton.Size =
                            UDim2.new(9e9, 9e9, 9e9, 9e9)
                        repeat
                            wait()
                        until Player.Character.FishingRod.Bait.SplashWater.Playing and
                            game:GetService("Players").LocalPlayer.Settings.CurrentFish.Value ~= ""
                        mouse1click()
                        Player.PlayerGui.FishingGui.ContainerFrame.ButtonsFrame.ReelButton.Size = UDim2.new(1, 0, 1, 0)
                        repeat
                            if Pointer.Position.X.Scale <= SafeBar.Position.X.Scale + .02 then
                                mouse1click()
                            end
                            wait()
                        until not Player.PlayerGui.FishingGui.ContainerFrame.ReelingFrame.Visible
                        wait()
                    end
                )
            end
        end
    end
)
end) 
Toggle1:CreateKeybind("T", function(Key)
end)

local ESP = loadstring(game:HttpGet("https://raw.githubusercontent.com/1201for/V.G-Hub/main/Karrot-Esp"))()



local Button1 = Section1:CreateButton("Equip Selected Dragon", function()
for i,v in pairs(game:GetService("Players").LocalPlayer.Data.Dragons:GetDescendants()) do
if  v.ClassName == 'StringValue' and  v.Value == Settings.Dragon and v:FindFirstChild("Stats") then 
game:GetService("ReplicatedStorage").Remotes.EquipDragonRemote:InvokeServer(v.Name)
end end 
end) 




local Dropdown1 = Section1:CreateDropdown("Dragons", Dragon, function(String)
    Settings.Dragon = String
end)


local Button1 = Section1:CreateButton("Delete Selected Dragon Speice", function()
for i,v in pairs(game:GetService("Players").LocalPlayer.Data.Dragons:GetDescendants()) do
if  v.ClassName == 'StringValue' and  v.Value == Settings.DeleteDragon and v:FindFirstChild("Stats") then 
game:GetService("ReplicatedStorage").Remotes.DeleteDragonRemote:InvokeServer(v.Name)
end end 
end) 



local Dropdown1 = Section1:CreateDropdown("Delete Dragons", Dragon, function(String)
    Settings.DeleteDragon = String
end)

local Button1 = Section1:CreateButton("UnEquip All Dragons", function()
for i, v in pairs(game:GetService("Players").LocalPlayer.Character.Dragons:GetDescendants()) do
    if v.ClassName == "Model" and v:FindFirstChild("ID") then
        game:GetService("ReplicatedStorage").Remotes.UnequipDragonRemote:InvokeServer(v.Name)
    end
end
end)

local Toggle1 = Section1:CreateToggle("Auto Feed Dragon", Settings.AutoFeed, function(State) 
Settings.AutoFeed = State
spawn(function()
while Settings.AutoFeed do wait()
        if Settings.AutoFeed then
            pcall(
                function()
                    for i, v in pairs(game:GetService("Players").LocalPlayer.Character.Dragons:GetChildren()) do
                        if v.ClassName == "Model" and v:FindFirstChild("ID") then
                            game:GetService("ReplicatedStorage").Remotes.FeedDragonRemote:InvokeServer(
                                v.Name,
                                {["Amount"] = 1, ["ItemName"] = list}
                            )
                        end
                    end
                end
            )
        end
    end
end)
end)
local Dropdown1 = Section1:CreateDropdown("Food Items",list, function(String)
    list = String
end)
local Toggle1 = Section1:CreateToggle("Auto grow Dragons", Settings.AutoGrow, function(State) 
Settings.AutoGrow = State
spawn(function()
while Settings.AutoGrow do wait()
        if Settings.AutoGrow then
            pcall(
                function()
                    for i, v in pairs(game:GetService("Players").LocalPlayer.Character.Dragons:GetDescendants()) do
                        if v.ClassName == "Model" and v:FindFirstChild("ID") then
                            game:GetService("ReplicatedStorage").Remotes.GrowDragonRemote:InvokeServer(tostring(v.Name))
                        end
                    end
                end
            )
        end
    end
end)
end)
local Toggle1 = Section1:CreateToggle("Auto Heal Dragons", Settings.AutoHeal, function(State) 
Settings.AutoHeal = State
spawn(function()
while Settings.AutoHeal do wait(0.1)
        if Settings.AutoHeal then
            pcall(
                function()
                    for i, v in pairs(game:GetService("Players").LocalPlayer.Character.Dragons:GetChildren()) do
                        if v.ClassName == "Model" and v:FindFirstChild("ID") then
                            game:GetService("ReplicatedStorage").Remotes.HealDragonRemote:InvokeServer(
                                tostring(v.Name),
                                healing
                            )
                        end
                    end
                end
            )
        end
end
end)
end)



local Dropdown1 = Section1:CreateDropdown("Healing Items", healing, function(String)
    Settings.HealingItem = String
end)


local Toggle1 = Section1:CreateToggle("Auto Invis", Settings.AutoInvis, function(State)
Settings.AutoInvis = State
Invis()
game.Players.LocalPlayer.CharacterAdded:Connect(function()
if Settings.AutoInvis then
repeat wait() until game.Players.LocalPlayer.Character wait(3)
Invis() end end)
end)



local Label1 = Section2:CreateLabel("World Teleports")
local Button1 = Section2:CreateButton("Teleport to Selected World", function()
for i,v in pairs(Poop) do
if string.find(Worlds,v.GameId) then
game:GetService("ReplicatedStorage").Remotes.WorldTeleportRemote:InvokeServer(v.GameId,{})
end end 
end)


local Dropdown1 = Section2:CreateDropdown("Worlds",Worlds, function(String)
    Worlds = String
end)

local Toggle1 = Section2:CreateToggle("Enable WalkSpeed/JumpPower", Settings.Go, function(State)
Settings.Go = State
game:GetService("RunService").Stepped:connect(
    function()
        if Settings.Go then
            game.Players.LocalPlayer.Character:WaitForChild("Humanoid").WalkSpeed = Settings.WalkSpeed
            game.Players.LocalPlayer.Character:WaitForChild("Humanoid").JumpPower = Settings.JumpPower
            if not game:GetService("UserInputService").WindowFocusReleased then
                setfpscap(Settings.Fps)
            end
        end
    end
)

end)

local TextBox1 = Section2:CreateTextBox("Fps Cap", "Only numbers", true, function(Value)
    Settings.Fps = Value
end)

local TextBox1 = Section2:CreateTextBox("WalkSpeed", "Only numbers", true, function(Value)
    Settings.WalkSpeed = Value
end)
local TextBox1 = Section2:CreateTextBox("JumpPower", "Only numbers", true, function(Value)
    Settings.JumpPower = Value
end)



local Toggle1 = Section2:CreateToggle("Enable Esp", Settings.Esp, function(State)
    Settings.Esp = State
    ESP:Toggle(Settings.Esp)
end)
if game.PlaceId ~= 5777228223 then
local Toggle1 = Section2:CreateToggle("Egg Esp", Settings.EggEsp, function(State) 
ESP:AddObjectListener(game:GetService("Workspace").Interactions.Nodes.Harvest.Eggs.ActiveNodes, {
    Color =  Color3.new(255,0,0),
    Type = "Model",
    PrimaryPart = function(v)
        local H = v:FindFirstChildWhichIsA("BasePart")
        while not H do
            wait()
            H = v:FindFirstChildWhichIsA("BasePart")
        end
        return H
    end,
    Validator = function(v)
        return not game.Players:GetPlayerFromCharacter(v)
    end,
    CustomName = function(v)
        return  "Egg"
    end,
    IsEnabled = "Egg",
})
Settings.EggEsp = State
ESP.Egg = Settings.EggEsp
end)
end 

local Toggle1 = Section2:CreateToggle("PLayer Esp", Settings.PlayerEsp, function(State)
    Settings.PlayerEsp = State
    ESP.Players = Settings.PlayerEsp
end)
local Toggle1 = Section2:CreateToggle("Tracers Esp", Settings.Tracers, function(State)
    Settings.Tracers = State
    ESP.Tracers = Settings.Tracers
end)
local Toggle1 = Section2:CreateToggle("Name Esp", Settings.EspNames, function(State)
    ESP.Names = Settings.EspNames
    Settings.EspNames = State
end)
local Toggle1 = Section2:CreateToggle("Boxes Esp", Settings.Boxes, function(State)
    Settings.Boxes = State
    ESP.Boxes = Settings.Boxes
end)

local Toggle1 = Section2:CreateToggle("Infinite Jump", Settings.InfiniteJump, function(State)
Settings.InfiniteJump = State
game:GetService("UserInputService").JumpRequest:connect(
    function()
        if Settings.InfiniteJump then
            game:GetService "Players".LocalPlayer.Character:FindFirstChildWhichIsA "Humanoid":ChangeState("Jumping")
        end
    end
)
end)


local Toggle1 = Section2:CreateToggle("Invisicam", Settings.Sorry, function(State)
Settings.Sorry = State
if Settings.Sorry then
    game:GetService("Players").LocalPlayer.DevCameraOcclusionMode = "Invisicam"
else
    game:GetService("Players").LocalPlayer.DevCameraOcclusionMode = "Zoom"
end
end)

local Toggle1 = Section2:CreateToggle("N Noclip", Settings.Sex1, function(State)
noclips = false
Settings.Sex1 = State
game.Players.LocalPlayer:GetMouse().KeyDown:connect(
    function(v)
        if v == "n" then
            if Settings.Sex1 then
                noclips = not noclips
                for i, v in pairs(game.Players.LocalPlayer.Character:GetChildren()) do
                    if v:IsA("BasePart") then
                        v.CanCollide = false
                    end
                end
            end
        end
    end
)
game:GetService("RunService").Stepped:connect(
    function()
        if noclips then
            for i, v in pairs(game.Players.LocalPlayer.Character:GetChildren()) do
                if v:IsA("BasePart") then
                    v.CanCollide = false
                end
            end
        end
    end
)

end)

local Toggle1 = Section2:CreateToggle("J Noclip", Settings.Sex, function(State)
Settings.Sex = State
noclip = false
game:GetService("RunService").Stepped:connect(
    function()
        if noclip then
            game.Players.LocalPlayer.Character.Humanoid:ChangeState(11)
        end
    end
)
mouse = game.Players.LocalPlayer:GetMouse()
game.Players.LocalPlayer:GetMouse().KeyDown:connect(
    function(v)
        if v == "j" then
            if Settings.Sex then
                noclip = not noclip
                game.Players.LocalPlayer.Character.Humanoid:ChangeState(11)
            end
        end
    end
)
end)
local Toggle1 = Section2:CreateToggle("H Fly", Settings.Sex2, function(State)
Settings.Sex2 = State
local Max = 0
local Players = game.Players
local LP = Players.LocalPlayer
local Mouse = LP:GetMouse()
Mouse.KeyDown:connect(
    function(k)
        if k:lower() == "h" then
            Max = Max + 1
            getgenv().Fly = false
            if Settings.Sex2 then
                local T = LP.Character.UpperTorso
                local S = {
                    F = 0,
                    B = 0,
                    L = 0,
                    R = 0
                }
                local S2 = {
                    F = 0,
                    B = 0,
                    L = 0,
                    R = 0
                }
                local SPEED = 5
                local function FLY()
                    getgenv().Fly = true
                    local BodyGyro = Instance.new("BodyGyro", T)
                    local BodyVelocity = Instance.new("BodyVelocity", T)
                    BodyGyro.P = 9e4
                    BodyGyro.maxTorque = Vector3.new(9e9, 9e9, 9e9)
                    BodyGyro.cframe = T.CFrame
                    BodyVelocity.velocity = Vector3.new(0, 0.1, 0)
                    BodyVelocity.maxForce = Vector3.new(9e9, 9e9, 9e9)
                    spawn(
                        function()
                            repeat
                                wait()
                                LP.Character.Humanoid.PlatformStand = false
                                if S.L + S.R ~= 0 or S.F + S.B ~= 0 then
                                    SPEED = 200
                                elseif not (S.L + S.R ~= 0 or S.F + S.B ~= 0) and SPEED ~= 0 then
                                    SPEED = 0
                                end
                                if (S.L + S.R) ~= 0 or (S.F + S.B) ~= 0 then
                                    BodyVelocity.velocity =
                                        ((game.Workspace.CurrentCamera.CoordinateFrame.lookVector * (S.F + S.B)) +
                                        ((game.Workspace.CurrentCamera.CoordinateFrame *
                                            CFrame.new(S.L + S.R, (S.F + S.B) * 0.2, 0).p) -
                                            game.Workspace.CurrentCamera.CoordinateFrame.p)) *
                                        SPEED
                                    S2 = {
                                        F = S.F,
                                        B = S.B,
                                        L = S.L,
                                        R = S.R
                                    }
                                elseif (S.L + S.R) == 0 and (S.F + S.B) == 0 and SPEED ~= 0 then
                                    BodyVelocity.velocity =
                                        ((game.Workspace.CurrentCamera.CoordinateFrame.lookVector * (S2.F + S2.B)) +
                                        ((game.Workspace.CurrentCamera.CoordinateFrame *
                                            CFrame.new(S2.L + S2.R, (S2.F + S2.B) * 0.2, 0).p) -
                                            game.Workspace.CurrentCamera.CoordinateFrame.p)) *
                                        SPEED
                                else
                                    BodyVelocity.velocity = Vector3.new(0, 0.1, 0)
                                end
                                BodyGyro.cframe = game.Workspace.CurrentCamera.CoordinateFrame
                            until not getgenv().Fly
                            S = {
                                F = 0,
                                B = 0,
                                L = 0,
                                R = 0
                            }
                            S2 = {
                                F = 0,
                                B = 0,
                                L = 0,
                                R = 0
                            }
                            SPEED = 0
                            BodyGyro:destroy()
                            BodyVelocity:destroy()
                            LP.Character.Humanoid.PlatformStand = false
                        end
                    )
                end
                Mouse.KeyDown:connect(
                    function(k)
                        if k:lower() == "w" then
                            S.F = 1
                        elseif k:lower() == "s" then
                            S.B = -1
                        elseif k:lower() == "a" then
                            S.L = -1
                        elseif k:lower() == "d" then
                            S.R = 1
                        end
                    end
                )
                Mouse.KeyUp:connect(
                    function(k)
                        if k:lower() == "w" then
                            S.F = 0
                        elseif k:lower() == "s" then
                            S.B = 0
                        elseif k:lower() == "a" then
                            S.L = 0
                        elseif k:lower() == "d" then
                            S.R = 0
                        end
                    end
                )
                FLY()
                if Max == 2 then
                    getgenv().Fly = false
                    Max = 0
                end
            end
        end
    end
)
end)
local Button1 = Section2:CreateButton("Anti Lag", function()
for _, v in pairs(game:GetService("Workspace"):GetDescendants()) do
    if v:IsA("BasePart") and not v.Parent:FindFirstChild("Humanoid") then
        v.Material = Enum.Material.SmoothPlastic
        if v:IsA("Texture") then
            v:Destroy()
        end
    end
end
end)

local Button1 = Section2:CreateButton("Teleport to RandomPlayer", function()
local randomPlayer = game.Players:GetPlayers()[math.random(1, #game.Players:GetPlayers())]

game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame =
    CFrame.new(
    Vector3.new(
        randomPlayer.Character.Head.Position.X,
        randomPlayer.Character.Head.Position.Y,
        randomPlayer.Character.Head.Position.Z
    )
)
end)
local Button1 = Section2:CreateButton("Lag Switch F3", function()
local ass = false
local bitch = settings()

game:service "UserInputService".InputEnded:connect(
    function(i)
        if i.KeyCode == Enum.KeyCode.F3 then
            ass = not ass
            bitch.Network.IncomingReplicationLag = ass and 10 or 0
        end
    end
)
 end) 
local Button1 = Section2:CreateButton("ServerHop", function()
local PlaceID = game.PlaceId
local AllIDs = {}
local foundAnything = ""
local actualHour = os.date("!*t").hour
local Deleted = false
local File = pcall(function()
    AllIDs = game:GetService('HttpService'):JSONDecode(readfile("NotSameServers.json"))
end)
if not File then
    table.insert(AllIDs, actualHour)
    writefile("NotSameServers.json", game:GetService('HttpService'):JSONEncode(AllIDs))
end
function TPReturner()
    local Site;
    if foundAnything == "" then
        Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100'))
    else
        Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100&cursor=' .. foundAnything))
    end
    local ID = ""
    if Site.nextPageCursor and Site.nextPageCursor ~= "null" and Site.nextPageCursor ~= nil then
        foundAnything = Site.nextPageCursor
    end
    local num = 0;
    for i,v in pairs(Site.data) do
        local Possible = true
        ID = tostring(v.id)
        if tonumber(v.maxPlayers) > tonumber(v.playing) then
            for _,Existing in pairs(AllIDs) do
                if num ~= 0 then
                    if ID == tostring(Existing) then
                        Possible = false
                    end
                else
                    if tonumber(actualHour) ~= tonumber(Existing) then
                        local delFile = pcall(function()
                            delfile("NotSameServers.json")
                            AllIDs = {}
                            table.insert(AllIDs, actualHour)
                        end)
                    end
                end
                num = num + 1
            end
            if Possible == true then
                table.insert(AllIDs, ID)
                wait()
                pcall(function()
                    writefile("NotSameServers.json", game:GetService('HttpService'):JSONEncode(AllIDs))
                    wait()
                    game:GetService("TeleportService"):TeleportToPlaceInstance(PlaceID, ID, game.Players.LocalPlayer)
                end)
                wait(4)
            end
        end
    end
end

function Teleport()
    while wait() do
        pcall(function()
            TPReturner()
            if foundAnything ~= "" then
                TPReturner()
            end
        end)
    end
end

-- If you'd like to use a script before server hopping (Like a Automatic Chest collector you can put the Teleport() after it collected everything.
Teleport() 
end)
local Button1 = Section2:CreateButton("Rejoin", function()
game:GetService("TeleportService"):Teleport(game.PlaceId, game:GetService("Players").LocalPlayer) end)





local Toggle3 = Section3:CreateToggle("UI Toggle", nil, function(State)
	Window:Toggle(State)
end)
Toggle3:CreateKeybind(tostring(Config.Keybind):gsub("Enum.KeyCode.", ""), function(Key)
	Config.Keybind = Enum.KeyCode[Key]
end)
Toggle3:SetState(true)
Section3:CreateLabel("Credits DekuDimz#7960")
Section3:CreateLabel("Credits AlexR32#3232 Ui")
Section3:CreateLabel("Credits The3Bakers")
local Colorpicker3 = Section3:CreateColorpicker("UI Color", function(Color)
	Window:ChangeColor(Color)
end)
Colorpicker3:UpdateColor(Config.Color)

-- credits to jan for patterns
local Dropdown3 = Section4:CreateDropdown("Image", {"Default","Hearts","Abstract","Hexagon","Circles","Lace With Flowers","Floral"}, function(Name)
	if Name == "Default" then
		Window:SetBackground("2151741365")
	elseif Name == "Hearts" then
		Window:SetBackground("6073763717")
	elseif Name == "Abstract" then
		Window:SetBackground("6073743871")
	elseif Name == "Hexagon" then
		Window:SetBackground("6073628839")
	elseif Name == "Circles" then
		Window:SetBackground("6071579801")
	elseif Name == "Lace With Flowers" then
		Window:SetBackground("6071575925")
	elseif Name == "Floral" then
		Window:SetBackground("5553946656")
	end
end)
Dropdown3:SetOption("Default")

local Colorpicker4 = Section4:CreateColorpicker("Color", function(Color)
	Window:SetBackgroundColor(Color)
end)
Colorpicker4:UpdateColor(Color3.new(1,1,1))

local Slider3 = Section4:CreateSlider("Transparency",0,1,nil,false, function(Value)
	Window:SetBackgroundTransparency(Value)
end)
Slider3:SetValue(0)

local Slider4 = Section4:CreateSlider("Tile Scale",0,1,nil,false, function(Value)
	Window:SetTileScale(Value)
end)
Slider4:SetValue(0.5)


spawn(function()
while wait() do
Save()
end end)
